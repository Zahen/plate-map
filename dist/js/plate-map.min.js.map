{"version":3,"sources":["add-data-on-change.js","add-data-to-tabs.js","add-tab-data.js","add-warning-msg.js","bottom-table.js","canvas.js","check-box.js","color-manager.js","create-canvas-elements.js","create-field.js","engine.js","fabric-events.js","image_assets.js","interface.js","load-plate.js","main.js","overlay.js","plate-layout.js","preset.js","tabs.js","undo-redo-manager.js","well-area.js"],"names":["plateLayOutWidget","$","fabric","addDataOnChange","_addAllData","data","this","allSelectedObjects","noOfSelectedObjects","length","wells","objectIndex","well","tile","index","engine","derivative","extend","defaultWell","processedData","processWellData","wellEmpty","emptyWellWithDefaultVal","disableAddDeleteWell","wellCopy","JSON","parse","stringify","defaultValue","key","_applyFieldData","_getAllMultipleVal","applyFieldWarning","_colorMixer","derivativeChange","newData","curWell","wellList","id","v","undefined","multi","curData","preData","newDt","_getMultiData","push","fieldId","addNew","added","removed","value","add","listIdx","toString","map","val","subFieldId","indexOf","removeIndex","removeListIndex","newPreData","idx","parseInt","undoRedoActive","createObject","addToUndoRedo","searchAndStack","applyColors","mainFabricCanvas","renderAll","_trigger","checkboxes","globalSelectedAttributes","slice","selectedAreas","focalWell","requiredField","jQuery","addDataToFields","_addDataToTabFields","values","fieldMap","setValue","addTabData","fieldList","autoId","_addTabData","tabData","options","attributes","tabs","that","multiplexFieldArray","forEach","tab","tabPointer","tabFields","fieldArray","field","field_val","console","log","type","_makeMultiplexField","_makeRegularField","allDataTabs","multipleFieldList","_makeSubField","wrapperDiv","_createElement","addClass","attr","getFieldId","name","wrapperDivLeftSide","wrapperDivRightSide","nameContainer","text","fieldContainer","append","root","required","checkbox","fieldDivId","info","_addCheckBox","_createField","onChange","getValue","subFieldList","requiredSubField","subFieldKey","multiplexFields","subFieldData","subField","multiplexId","subFields","subfield","mainMultiplexField","mainRefField","curId","singleSelectValue","curVal","returnVal","_changeMultiFieldValue","curDataLs","detailData","input","select2","i","replace","addWarningMsg","fieldWarningMsg","include","imgId","img","html","_assets","warningImg","find","prepend","popText","hover","e","style","display","hide","remove","removeWarningMsg","fieldData","applyMultiplexSubFieldColor","Array","bottomTable","_bottomScreen","bottomTableContainer","bottomContainer","addBottomTableHeadings","bottomRow","singleField","empty","rowCounter","adjustFieldWidth","tileAttrText","getText","addBottomTableRow","color","singleStack","modelTile","allTiles","row","plateIdDiv","numberText","click","evt","addressToSelect","addressIdx","indexToAddress","ctrlKey","getSelectedAddress","setSelectedWell","selectedAddress","colorPairs","colorStops","css","dataDiv","bottomForFirstTime","createExportButton","downloadCSV","csv","filename","csvFile","downloadLink","Blob","document","createElement","download","href","window","URL","createObjectURL","body","appendChild","exportData","format","rows","querySelectorAll","colorLocMap","colorLocIdxMap","stackUpWithColor","dim","getDimensions","colorIdx","locIdx","cols","j","innerText","loc","join","overlayContainer","descriptionDiv","buttonContainer","exportButton","resetExportText","classList","setTimeout","clipboardButton","clipboard","ClipboardJS","get","resetClipboardText","on","canvas","allPreviouslySelectedObjects","colorPointer","goldenRatio","_createCanvas","normalCanvas","canvasContainer","_initiateFabricCanvas","w","width","h","height","_setCanvasArea","Canvas","backgroundColor","selection","stateful","hoverCursor","renderOnAddRemove","setWidth","setHeight","checkBox","checkImage","dontImg","_applyCheckboxHandler","checkBoxImage","machineClick","changes","changeCheckboxes","changeSubFieldsCheckboxes","subFieldToInclude","clicked","Boolean","doImg","gsa","multiplexCheckedSubField","globalSelectedMultiplexSubfield","_clearPresetSelection","setSubFieldCheckboxes","fieldIds","setCheckboxes","colorManager","createCanvasElements","scaleFactor","baseSizes","spacing","tile_radius","center_radius_complete","center_radius_incomplete","label_size","label_spacing","text_size","stroke","gap","Math","min","dimensions","sizes","prop","_canvas","_fixRowAndColumn","_putCircles","d1","d2","fontSize","top","left","tempFabricText","IText","fill","originX","originY","fontFamily","selectable","fontWeight","rowIndex","tileCounter","col","_createTile","background","highlight","circle","circleCenter","circleText","_addLargeRectangleOverlay","_fabricEvents","visible","colorIndex","address","Circle","radius","hasControls","hasBorders","lockMovementX","lockMovementY","evented","setGradient","x1","x2","y1","y2","r1","r2","0","1","Rect","strokeWidth","lockScalingX","lockScalingY","setTileComplete","complete","setTileVisible","setTileColor","stackPointer","String","overLay","opacity","createField","_createTextField","_createNumericField","_createSelectField","_createMultiSelectField","_createBooleanField","_createMultiplexField","parseValue","trim","disabled","bool","parseText","generated","_createOpts","config","opts","allowClear","placeholder","minimumResultsForSearch","query","delay","_debounce","optMap","opt","setOpts","multiple","allOpts","selectedVal","curOpts","multiOnChange","_createDeleteButton","units","defaultUnit","unitInput","hasUnits","unitText","selected","unit","o","setUnitOpts","newUnits","curUnit","cleanUnit","newOpts","isPlainObject","parseRegularValue","parseUnit","getRegularValue","isNaN","getUnit","hasMultiplexUnit","unitTypeKey","unitMap","setUnit","setRegularValue","Number","toLowerCase","u","getRegularText","textVal","removeClass","tval","fval","initSelection","element","callback","nameContainer1","fieldContainer1","singleSelect","appendTo","setSingleSelectOptions","selected_v","singleSelectChange","updateSubFieldUnitOpts","curSubField","readOnlyHandler","newSubFieldValue","subFieldName","multiselectSetValue","multiselectValues","newOptions","valMap","hasOwnProperty","unitOptions","curIds","curOpt","newMultiplexVal","selectList","newVal","selectId","checkedSubfields","valIdx","subV","subText","optId","x","checkMultiplexCompletion","valList","valCount","completionPct","getSubfieldStatus","vals","req","subFieldWarningMap","warningStatus","multiplexVals","multiplexIdx","updateSubFieldWarningMap","mainFieldStatus","warningText","mainFieldWarning","parseMainFieldVal","_deleteDialog","valToRemove","allSelectedMultipleVal","Object","keys","dialogDiv","killDialog","dialogContent","tableArea","buttonRow","table","_deleteDialogTable","readOnly","deleteCheckedButton","each","decideSelectedFields","cancelButton","show","onclick","event","target","colName","thead","tbody","tr","deleteButton","THIS","colorMap","Map","isArray","derivativeJson","wellData","selectedSubFields","curMultiplexVals","isEmptyObject","k","parseFloat","sort","a","b","refDerivativeIndex","referenceDerivative","arr","wholeNoTiles","wholePercentage","tileIndex","set","completion","checkCompletion","floor","overLayTextContainer","multiplexStatus","fabricEvents","colorToIndex","startCoords","y","_clickCoords","rect","getBoundingClientRect","clientX","clientY","getPlates","selecting","coords","areas","_wellToCoords","_coordsToRect","_coordsToWell","shiftKey","_rectToArea","setSelection","endCoords","area","scrollToGroup","selectObjectInBottomTab","_areasToTiles","_setSelectedTiles","_setFocalWellRect","activeElement","blur","flag","locToAddress","r","c","addressAllowToEdit","setFieldsDisabled","_areaToRect","_wellToArea","focalWellRect","selectedTiles","_getSelectedWells","_getCommonFields","referenceWell","referenceFields","fields","refArr","agrArr","containsObject","inArray","obj","list","equality","evaluate","listKey","_getCommonWell","multiplexField","curMultipleVal","multipleVal","getDifferentWellsVals","wellsHash","wellId","differentWellsVals","commonWell","allFieldVal","fieldIdx","wellIdx","diffWellVal","curWellData","commonVal","curMultiVal","getWellSetAddressWithData","assets","interface","_createWellsContainer","divIdentifier","wellsContainer","overLayContainer","_createOverLay","_setShortcuts","keyup","_handleShortcuts","_configureUndoRedoArray","_createTabsContainer","tabsContainer","_createTabAtRight","_createTabs","_placePresetTabs","_createGroupsContainer","addEventListener","copyCriteria","clearCriteria","preventDefault","pasteCriteria","keyCode","metaKey","redo","undo","loadPlate","sanitizeWell","sanitizeAreas","sanitized","setData","minCol","_coordIndex","maxCol","minRow","maxRow","max","_wellInArea","newWell","GET_PLATES","IS_READ_ONLY","IS_DISABLE_ADD_DELETE_WELL","GET_SELECTED_OBJECT","SETSELECTEDWELL","scrollTo","to","duration","perTick","scrollTop","overlay","overLayButtonContainer","clearCriteriaButton","copyCriteriaButton","pasteCriteriaButton","undoButton","redoButton","hasWellUpdate","alert","widget","addressToLoc","layoutAddress","m","exec","toUpperCase","row_v","charCodeAt","locToIndex","t","addressToIndex","_rowKey","c1","c2","code","fromCharCode","indexToLoc","_create","numRows","numCols","component","className","isReadOnly","imgSrc","_init","addData","getTextDerivative","wellsData","textDerivative","textValWell","textFieldIdWell","textFieldVal","getWellsDifferences","isDisableAddDeleteWell","column_with_default_val","actionPointer","undoRedoArray","getSelectedObject","selectedObjects","selectedObjectAddress","trs","tds","children","isSelected","querySelector","innerHTML","offsetTop","getSelectedIndex","selectedObj","addressList","locMap","apply","preset","me","presets","wellAttrContainer","tabContainer","presetTabContainer","divText","title","presetButton","_selectPreset","allTabs","tabHead","tabIndex","_tabClickHandler","tabDataContainer","_addDataTabs","clickedTab","selectedTab","previouslyClickedTabIndex","clickedTabIndex","undoRedoManager","splice","shiftUndoRedo","pointerDiff","pointer","setUndoRedo","wellArea","reduce","tiles","_encodeArea","_encodeAreas","_decodeWell","wellAddress","match","adRx","RegExp","_decodeArea","areaAddress","split","_decodeAreas","areasAddress","abs","count","coord","center","hw","right","bottom"],"mappings":"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","file":"plate-map.min.js","sourcesContent":["var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addDataOnChange = function() {\n    // This object is invoked when something in the tab fields change\n    return {\n\n      _addAllData: function(data) {\n        // Method to add data when something changes in the tabs. Its going to be tricky , just starting.\n        if (this.allSelectedObjects) {\n          var noOfSelectedObjects = this.allSelectedObjects.length;\n          var wells = [];\n          for (var objectIndex = 0; objectIndex < noOfSelectedObjects; objectIndex++) {\n            var tile = this.allSelectedObjects[objectIndex];\n            var well;\n            if (tile.index in this.engine.derivative) {\n              well = this.engine.derivative[tile.index];\n            } else {\n              well = $.extend(true, {}, this.defaultWell); \n              this.engine.derivative[tile.index] = well; \n            }\n            var processedData = this.processWellData(data, well, noOfSelectedObjects, wells);\n            wells = processedData.wells;\n            well = processedData.well;\n            var empty = this.engine.wellEmpty(well);\n            if (empty) {\n              if (this.emptyWellWithDefaultVal && this.disableAddDeleteWell) {\n                var wellCopy = JSON.parse(JSON.stringify(well));\n                var defaultValue = this.emptyWellWithDefaultVal;\n                for (var key in defaultValue){\n                  if (key in wellCopy){\n                    wellCopy[key] = defaultValue[key];\n                    this._applyFieldData(key, defaultValue[key]);\n                  }\n                }\n                this.engine.derivative[tile.index] = wellCopy;\n              } else {\n                delete this.engine.derivative[tile.index];\n              }\n            }\n          }\n        }\n        // update multiplex remove all field\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        // create well when default field is sent for the cases when user delete all fields during disabledNewDeleteWell mode\n        this._colorMixer();\n        this.derivativeChange();\n      },\n\n      processWellData: function(newData, curWell, noOfSelectedObjects, wellList) {\n\n        if (!wellList){\n          wellList = [];\n        }\n        for (var id in newData) {\n          var v;\n          if (newData[id] !== undefined && newData[id] !== null ) {\n            if (newData[id].multi){\n              var curData = newData[id];\n              var preData = curWell[id];\n              var newDt = this._getMultiData(preData, curData, id, noOfSelectedObjects);\n              // need to replace newData\n              v = JSON.parse(JSON.stringify(newDt));\n            } else {\n              v = JSON.parse(JSON.stringify(newData[id]));\n            }\n          } else {\n            v = JSON.parse(JSON.stringify(newData[id]));\n          }\n          curWell[id] = v;\n          wellList.push(curWell);\n        }\n\n        return {\n          well: curWell,\n          wells: wellList\n        }\n      },\n\n      _getMultiData: function(preData, curData, fieldId, noOfSelectedObjects) {\n        var addNew = curData.added;\n        var removed = curData.removed;\n        if (addNew) {\n          if (preData){\n            if (addNew.value) {\n              var add = true;\n              for (var listIdx in preData) {\n                var multiplexData = preData[listIdx];\n                // for cases when the add new data exist in well\n                if (multiplexData[fieldId].toString() === addNew.id.toString()) {\n                  add = false;\n                  // update subfield value\n                  preData = preData.map(function(val) {\n                    if (val[fieldId].toString() === addNew.id.toString()) {\n                      for (var subFieldId in val) {\n                        // over write previous data if only one well is selected\n                        if (subFieldId in addNew.value && subFieldId !== fieldId){\n                          if (noOfSelectedObjects === 1) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          } else if (addNew.value[subFieldId]) {\n                            val[subFieldId] = addNew.value[subFieldId];\n                          }\n                        }\n                      }\n                    }\n                    return val;\n                  })\n                }\n              }\n              if (add) {\n                preData.push(addNew.value);\n              }\n            } else if (preData.indexOf(addNew) < 0) {\n              preData.push(addNew);\n            }\n          } else {\n            preData = [];\n            if (addNew.value) {\n              preData.push(addNew.value);\n            } else if (addNew){\n              preData.push(addNew);\n            }\n          }\n        }\n\n        var removeListIndex = function(preData, removeIndex) {\n          var newPreData = [];\n          for (var idx in preData) {\n            if (parseInt(idx) !== parseInt(removeIndex)){\n              newPreData.push(preData[idx]);\n            }\n          }\n          return newPreData;\n        };\n\n        if (removed) {\n          var removeIndex;\n          // for multiplex field\n          if (removed.value) {\n            for (var listIdx in preData) {\n              var multiplexData = preData[listIdx];\n              if (multiplexData[fieldId].toString() === removed.id.toString()) {\n                removeIndex = listIdx;\n              }\n            }\n            // remove nested element\n            preData = removeListIndex(preData, removeIndex);\n          } else {\n            if (preData){\n              removeIndex = preData.indexOf(removed);\n              if (removeIndex >= 0) {\n                preData = removeListIndex(preData, removeIndex);\n              }\n            }\n          }\n        }\n        if (preData && (preData.length == 0)) {\n          preData = null; \n        }\n        return preData\n      },\n\n      _colorMixer: function() {\n        if (!this.undoRedoActive) {\n            var data = this.createObject();\n            this.addToUndoRedo(data);\n        }\n        this.engine.searchAndStack(); \n        this.engine.applyColors();\n        this.mainFabricCanvas.renderAll();\n      },\n\n      derivativeChange: function(){\n          this._trigger(\"updateWells\", null, this.createObject());\n      },\n\n      createObject: function() {\n        var derivative = $.extend(true, {}, this.engine.derivative); \n        var checkboxes = this.globalSelectedAttributes.slice(); \n        var selectedAreas = this.selectedAreas.slice(); \n        var focalWell = this.focalWell;\n\n        return {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedAreas\": selectedAreas,\n          \"focalWell\": focalWell,\n          \"requiredField\": this.requiredField\n        };\n      }\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addDataToFields = function() {\n\n    return {\n\n      _addDataToTabFields: function(values) {\n        // Configure how data is added to tab fields\n        for (var id in values) {\n          this._applyFieldData(id, values[id]);\n        }\n      },\n\n      _applyFieldData: function(id, v) {\n        this.fieldMap[id].setValue(v); \n      }\n    }\n  }\n})(jQuery, fabric)","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function ($, fabric) {\n\n    plateLayOutWidget.addTabData = function () {\n\n        return {\n\n            fieldList: [],\n            fieldMap: {},\n            autoId: 1,\n\n            _addTabData: function () {\n                // Here we may need more changes because attributes format likely to change\n                var tabData = this.options.attributes.tabs;\n                var that = this;\n                this.requiredField = [];\n                var multiplexFieldArray = [];\n                tabData.forEach(function (tab, tabPointer) {\n                    if (tab[\"fields\"]) {\n                        var tabFields = tab[\"fields\"];\n                        var fieldArray = [];\n                        var fieldArrayIndex = 0;\n                        // Now we look for fields in the json\n                        for (var field in tabFields) {\n                            var data = tabFields[field];\n\n                            if (!data.id) {\n                                data.id = \"Auto\" + that.autoId++;\n                                console.log(\"Field autoassigned id \" + data.id);\n                            }\n                            if (!data.type) {\n                                data.type = \"text\";\n                                console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n                            }\n\n                            var field_val;\n                            if (data.type === \"multiplex\") {\n                                field_val = that._makeMultiplexField(data, tabPointer, fieldArray);\n                                multiplexFieldArray.push(field_val);\n                            } else {\n                                field_val = that._makeRegularField(data, tabPointer, fieldArray, true);\n                                if (data.type === \"multiselect\") {\n                                    multiplexFieldArray.push(field_val);\n                                }\n                            }\n                            ;\n                        }\n\n                        that.allDataTabs[tabPointer][\"fields\"] = fieldArray;\n                    } else {\n                        console.log(\"unknown format in field initialization\");\n                    }\n                });\n                that.multipleFieldList = multiplexFieldArray;\n            },\n\n            _makeSubField: function (data, tabPointer, fieldArray) {\n                var that = this;\n                if (!data.id) {\n                    data.id = \"Auto\" + that.autoId++;\n                    console.log(\"Field autoassigned id \" + data.id);\n                }\n                if (!data.type) {\n                    data.type = \"text\";\n                    console.log(\"Field \" + data.id + \" autoassigned type \" + data.type);\n                }\n                var wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n                wrapperDiv.attr('id', this.getFieldId(tabPointer, data.name));\n                var wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n                var wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side\");\n                var nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n                var fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n                $(wrapperDivRightSide).append(nameContainer);\n                $(wrapperDivRightSide).append(fieldContainer);\n                $(wrapperDiv).append(wrapperDivLeftSide);\n                $(wrapperDiv).append(wrapperDivRightSide);\n                $(that.allDataTabs[tabPointer]).append(wrapperDiv);\n\n                var field = {\n                    id: data.id,\n                    name: data.name,\n                    root: wrapperDiv,\n                    data: data,\n                    required: data.required || false\n                };\n\n                fieldArray.push(field);\n                that.fieldMap[data.id] = field;\n\n                return field;\n            },\n\n            _makeRegularField: function (data, tabPointer, fieldArray, checkbox) {\n                var that = this;\n                var fieldDivId = this.getFieldId(tabPointer, data.name);\n                var wrapperDiv = $('#' + fieldDivId);\n                if (!wrapperDiv.length) {\n                    wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n                    wrapperDiv.attr('id', fieldDivId);\n                    that.allDataTabs[tabPointer].append(wrapperDiv);\n                } else {\n                    console.info('found ' + fieldDivId);\n                }\n                var wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n                var wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n                var nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n                var fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n                wrapperDivRightSide.append(nameContainer);\n                wrapperDivRightSide.append(fieldContainer);\n                wrapperDiv.append(wrapperDivLeftSide);\n                wrapperDiv.append(wrapperDivRightSide);\n\n                var field = {\n                    id: data.id,\n                    name: data.name,\n                    root: wrapperDiv,\n                    data: data,\n                    required: data.required\n                };\n\n                if (field.required) {\n                    that.requiredField.push(field.id);\n                }\n\n                fieldArray.push(field);\n                that.fieldList.push(field);\n                that.fieldMap[field.id] = field;\n\n                // Adding checkbox\n                if (checkbox) {\n                    that._addCheckBox(field);\n                }\n                that._createField(field);\n\n                field.onChange = function () {\n                    var v = field.getValue();\n                    var data = {};\n                    data[field.id] = v;\n                    that._addAllData(data);\n                };\n                return field;\n            },\n\n            _makeMultiplexField: function (data, tabPointer, fieldArray) {\n                var that = this;\n                var wrapperDiv = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-default-field\");\n                wrapperDiv.attr('id', this.getFieldId(tabPointer, data.name));\n                var wrapperDivLeftSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-left-side\");\n                var wrapperDivRightSide = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-right-side \");\n                var nameContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name\").text(data.name);\n                var fieldContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container\");\n\n                wrapperDivRightSide.append(nameContainer);\n                wrapperDivRightSide.append(fieldContainer);\n                wrapperDiv.append(wrapperDivLeftSide);\n                wrapperDiv.append(wrapperDivRightSide);\n                that.allDataTabs[tabPointer].append(wrapperDiv);\n\n                var field = {\n                    id: data.id,\n                    name: data.name,\n                    root: wrapperDiv,\n                    data: data,\n                    required: data.required\n                };\n\n                fieldArray.push(field);\n                that.fieldList.push(field);\n                that.fieldMap[data.id] = field;\n\n                var subFieldList = [];\n                //create subfields\n                var requiredSubField = [];\n                for (var subFieldKey in data.multiplexFields) {\n                    var subFieldData = data.multiplexFields[subFieldKey];\n                    var subField = that._makeSubField(subFieldData, tabPointer, fieldArray);\n                    subFieldList.push(subField);\n\n                    // stores required  subField\n                    if (subFieldData.required) {\n                        requiredSubField.push(subField.id);\n                    }\n                }\n\n                //store required field\n                if (field.required || requiredSubField.length) {\n                    this.requiredField.push({\n                        multiplexId: field.id,\n                        subFields: requiredSubField\n                    });\n                }\n\n                field.subFieldList = subFieldList;\n                that._createField(field);\n                that._addCheckBox(field);\n\n                subFieldList.forEach(function (subfield) {\n                    subfield.mainMultiplexField = field;\n                    fieldArray.push(subfield);\n                    that._createField(subfield);\n                    that._addCheckBox(subfield);\n                    delete that.defaultWell[subfield.id];\n                    // overwrite subField setvalue\n                    subfield.onChange = function () {\n                        var v = subfield.getValue();\n                        var mainRefField = subfield.mainMultiplexField;\n                        var curId = mainRefField.singleSelectValue();\n                        //var curDataLs = mainRefField.detailData;\n                        var curVal = {};\n                        curVal[mainRefField.id] = curId;\n                        //append subfields\n                        curVal[subfield.id] = v;\n                        var returnVal = {\n                            id: curId,\n                            value: curVal\n                        };\n\n                        field._changeMultiFieldValue(returnVal, null);\n                        var curDataLs = mainRefField.detailData;\n                        if (curDataLs !== null) {\n                            curId = mainRefField.singleSelectValue();\n                            curDataLs = curDataLs.map(function (curData) {\n                                if (curData[mainRefField.id] === curId) {\n                                    curData[subfield.id] = v;\n                                }\n                                return curData;\n                            });\n                        }\n                        mainRefField.detailData = curDataLs;\n                    };\n\n                });\n\n                field.getValue = function () {\n                    var v = field.input.select2('data');\n                    if (v.length) {\n                        return v.map(function (i) {\n                            return i.id;\n                        });\n                    }\n                    return null;\n                };\n\n                return field;\n            },\n            getFieldId: function (tabPointer, name) {\n                return 'tab-' + tabPointer.toString() + '-' + name.replace(/ /g, '-');\n            }\n\n        }\n    }\n\n})(jQuery, fabric);\n","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.addWarningMsg = function () {\n    // For those check boxes associated with every field in the tab\n    return {\n      fieldWarningMsg: function (field, text, include) {\n        var that = this;\n        var imgId = \"fieldWarning\" + field.id;\n        var img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        //field.root.find(\".plate-setup-tab-name\").append('<img id=\"theImg\" src=\"theImg.png\" />')\n        if (include) {\n          if (field.root.find(\"#\" + imgId).length <= 0){\n            field.root.find(\".plate-setup-tab-name\").text(\" \" + field.name);\n            field.root.find(\".plate-setup-tab-name\").prepend(img);\n\n            var popText = $(\"<div/>\").addClass(\"pop-out-text\");\n            popText.text(text);\n            field.root.find(\".plate-setup-tab-name\").append(popText);\n\n            $(\"#\" + imgId).hover(function (e) {\n              popText[0].style.display = 'flex';\n            }, function () {\n              popText.hide();\n            });\n          }\n\n\n        } else {\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            field.root.find(\".plate-setup-tab-name\").text(field.name);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      removeWarningMsg: function (field, text, include) {\n        var that = this;\n        var imgId = \"fieldWarning\" + field.id;\n        var img = $(\"<span>\").html(that._assets.warningImg).attr(\"id\", imgId).addClass(\"plate-field-warning-image\");\n        //field.root.find(\".plate-setup-tab-name\").append('<img id=\"theImg\" src=\"theImg.png\" />')\n        if (include) {\n          field.root.find(\".plate-setup-tab-name\").append(img);\n\n          var popText = $(\"<div/>\").addClass(\"pop-out-text\");\n          popText.text(text);\n          field.root.find(\".plate-setup-tab-name\").append(popText);\n\n          $(\"#\" + imgId).hover(function (e) {\n            popText[0].style.display = 'inline-block';\n          }, function () {\n            popText.hide();\n          });\n\n        } else {\n          $(\"#\" + imgId).remove();\n          if (field.root.find(\"#\" + imgId).length > 0) {\n            //field.root.find(\".plate-setup-tab-name\").remove(img);\n            $(\"#\" + imgId).remove();\n          }\n        }\n      },\n\n      applyFieldWarning: function(wells) {\n        var that = this;\n        var req = 0;\n        var fill = 0;\n        var fieldData = {};\n        that.fieldList.forEach(function(field){\n          fieldData[field.id] = [];\n        });\n        wells.forEach(function(well){\n          if (!that.engine.wellEmpty(well)){\n            for (var fieldId in fieldData) {\n              if (fieldId in well) {\n                fieldData[fieldId].push(well[fieldId]);\n              } else {\n                fieldData[fieldId].push(null);\n              }\n            }\n          }\n        });\n        for (var i = 0; i < that.fieldList.length; i++) {\n          var field = that.fieldList[i];\n          if (field.applyMultiplexSubFieldColor){\n            field.applyMultiplexSubFieldColor(fieldData[field.id]);\n          } else {\n            if (field.required) {\n              var include = false;\n              fieldData[field.id].forEach(function(val){\n                // for multiselect\n                if (val instanceof Array) {\n                  if (val.length === 0) {\n                    include = true;\n                  }\n                } else {\n                  if (val === null) {\n                    include = true;\n                  }\n                }\n              });\n              //field.root.find(\".plate-setup-tab-name\").css(\"background\", color);\n              that.fieldWarningMsg(field, \"required field\", include);\n            }\n          }\n        }\n      }\n    }\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function ($, fabric) {\n\n    plateLayOutWidget.bottomTable = function () {\n        // for bottom table\n        return {\n            _bottomScreen: function () {\n                this.bottomTableContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-bottom-table-container\");\n                this.bottomTable = this._createElement(\"<table></table>\").addClass(\"plate-setup-bottom-table\");\n                this.bottomTableContainer.append(this.bottomTable);\n                this.bottomContainer.append(this.bottomTableContainer);\n            },\n\n            addBottomTableHeadings: function () {\n\n                this.bottomRow = this._createElement(\"<tr></tr>\");\n\n                var singleField = this._createElement(\"<th></th>\")\n                    .text(\"Group\");\n                this.bottomRow.prepend(singleField);\n                // Now we append all the captions at the place.\n                this.bottomTable.empty();\n                this.bottomTable.append(this.bottomRow);\n\n                this.rowCounter = 1;\n\n                for (var i = 0; i < this.globalSelectedAttributes.length; i++) {\n                    var attr = this.globalSelectedAttributes[i];\n                    var field = this.fieldMap[attr];\n                    var singleField = this._createElement(\"<th></th>\").text(field.name);\n                    this.bottomRow.append(singleField);\n                    this.rowCounter = this.rowCounter + 1;\n                }\n\n                this.adjustFieldWidth(this.bottomRow);\n            },\n\n            tileAttrText: function (tile, attr) {\n                var well = this.engine.derivative[tile.index];\n                var field = this.fieldMap[attr];\n                return field.getText(well[attr]);\n            },\n\n            addBottomTableRow: function (color, singleStack) {\n                var that = this;\n                var modelTile = this.allTiles[singleStack[0]];\n                var row = this._createElement(\"<tr></tr>\");\n                var plateIdDiv = this._createElement(\"<td></td>\").addClass(\"plate-setup-bottom-id\");\n                var numberText = this._createElement(\"<button/>\");\n                numberText.addClass(\"plate-setup-color-text\");\n                numberText.text(color);\n                plateIdDiv.append(numberText);\n\n                numberText.click(function (evt) {\n                    var addressToSelect = singleStack.map(function (addressIdx) {\n                        return that.indexToAddress(addressIdx)\n                    });\n                    if (evt.ctrlKey) {\n                        that.getSelectedAddress().forEach(function (val) {\n                            if (addressToSelect.indexOf(val) < 0) {\n                                addressToSelect.push(val);\n                            }\n                        })\n                    }\n                    that.setSelectedWell(addressToSelect);\n                    that._trigger(\"selectedWells\", null, {selectedAddress: that.getSelectedAddress()});\n                });\n\n                if (color > 0) {\n                    color = ((color - 1) % (this.colorPairs.length - 1)) + 1;\n                }\n                var colorStops = this.colorPairs[color];\n\n                plateIdDiv.css(\"background\", \"linear-gradient(to right, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n\n                row.append(plateIdDiv);\n\n                for (var i = 0; i < this.globalSelectedAttributes.length; i++) {\n                    var attr = this.globalSelectedAttributes[i];\n                    var text = this.tileAttrText(modelTile, attr);\n                    var dataDiv = this._createElement(\"<td></td>\").text(text);\n                    row.append(dataDiv);\n                }\n                this.bottomTable.append(row);\n                this.adjustFieldWidth(row);\n            },\n\n            bottomForFirstTime: function () {\n                this.addBottomTableHeadings();\n                // This is executed for the very first time.. !\n                var row = this._createElement(\"<tr></tr>\");\n\n                var colorStops = this.colorPairs[0];\n                var plateIdDiv = this._createElement(\"<td></td>\");\n                plateIdDiv.css(\"background\", \"-webkit-linear-gradient(left, \" + colorStops[0] + \" , \" + colorStops[1] + \")\");\n                row.append(plateIdDiv);\n                this.bottomTable.append(row);\n                this.createExportButton();\n            },\n\n            adjustFieldWidth: function (row) {\n\n                var length = this.rowCounter;\n                if ((length) * 150 > 1024) {\n                    row.css(\"width\", (length) * 152 + \"px\");\n                }\n            },\n\n            downloadCSV: function (csv, filename) {\n                var csvFile;\n                var downloadLink;\n\n                // CSV file\n                csvFile = new Blob([csv], {\n                    type: \"text/csv\"\n                });\n\n                // Download link\n                downloadLink = document.createElement(\"a\");\n\n                // File name\n                downloadLink.download = filename;\n\n                // Create a link to the file\n                downloadLink.href = window.URL.createObjectURL(csvFile);\n\n                // Hide download link\n                downloadLink.style.display = \"none\";\n\n                // Add the link to DOM\n                document.body.appendChild(downloadLink);\n\n                // Click download link\n                downloadLink.click();\n            },\n\n            exportData: function (format) {\n                var data = [];\n                var rows = document.querySelectorAll(\"table tr\");\n\n                var colorLocMap = {};\n                var colorLocIdxMap = this.engine.stackUpWithColor;\n                var dim = this.getDimensions();\n                var that = this;\n                for (var colorIdx in colorLocIdxMap) {\n                    colorLocMap[colorIdx] = colorLocIdxMap[colorIdx].map(function (locIdx) {\n                        return that.indexToAddress(locIdx, dim);\n                    })\n                }\n\n                for (var i = 0; i < rows.length; i++) {\n                    var row = [],\n                        cols = rows[i].querySelectorAll(\"td, th\");\n\n                    for (var j = 0; j < cols.length; j++) {\n                        var v = \"\";\n                        if (cols[j].innerText) {\n                            if (format === \"csv\") {\n                                v = '\"' + cols[j].innerText.replace(/\"/g, '\"\"') + '\"';\n                            } else {\n                                v = cols[j].innerText;\n                            }\n                        }\n                        row.push(v);\n\n                        // add location column\n                        if (i === 0 && j === 0) {\n                            if (format === \"csv\") {\n                                row.push('\"Location\"');\n                            } else if (format === 'clipboard') {\n                                row.push(\"Location\");\n                            }\n\n                        }\n                        if (i !== 0 && j === 0) {\n                            var loc = '';\n                            if (colorLocMap[parseInt(cols[j].innerText)]) {\n                                if (format === \"csv\") {\n                                    loc = '\"' + colorLocMap[parseInt(cols[j].innerText)].join(\",\") + '\"';\n                                } else if (format === 'clipboard') {\n                                    loc = colorLocMap[parseInt(cols[j].innerText)].join(\",\");\n                                }\n                            }\n                            row.push(loc);\n                        }\n                    }\n\n                    if (format === \"csv\") {\n                        data.push(row.join(\",\"));\n                    } else if (format === 'clipboard') {\n                        data.push(row.join(\"\\t\"));\n                        //data.push(row);   // for text type\n                    }\n\n                }\n                if (format === \"csv\") {\n                    // Download CSV file\n                    this.downloadCSV(data.join(\"\\n\"), 'table.csv');\n                } else if (format === 'clipboard') {\n                    //return formatTableToString(data);   // for text type\n                    return data.join(\"\\n\");\n                }\n            },\n\n            createExportButton: function () {\n                var that = this;\n                var overlayContainer = $(\"<div>\").addClass(\"plate-setup-bottom-control-container\");\n\n                var descriptionDiv = $(\"<div>\").addClass(\"plate-setup-overlay-text-container\");\n                descriptionDiv.text(\"Color groups\");\n                overlayContainer.append(descriptionDiv);\n\n                var buttonContainer = $(\"<div>\").addClass(\"plate-setup-overlay-bottom-button-container\");\n\n                // create export csv option\n                var exportButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n                exportButton.text(\"Export CSV\");\n                buttonContainer.append(exportButton);\n\n                exportButton.click(function () {\n                    that.exportData('csv');\n                    exportButton.text(\"Exported\");\n                    exportButton[0].classList.remove(\"plate-setup-button\");\n                    exportButton.addClass(\"plate-setup-clicked-button\");\n                    setTimeout(resetExportText, 3000);\n                });\n\n                function resetExportText() {\n                    exportButton.text(\"Export CSV\");\n                    exportButton[0].classList.remove(\"plate-setup-clicked-button\");\n                    exportButton.addClass(\"plate-setup-button\");\n                }\n\n                // creat clipboard option, CLipboard is an external js file located in vendor/asset/javascripts\n                var clipboardButton = $(\"<button/>\").addClass(\"plate-setup-button\");\n                clipboardButton.text(\"Copy To Clipboard\");\n                buttonContainer.append(clipboardButton);\n\n                var clipboard = new ClipboardJS(clipboardButton.get(0), {\n                    text: function () {\n                        return that.exportData(\"clipboard\");\n                    }\n                });\n\n                clipboard.on('success', function (e) {\n                    clipboardButton.text(\"Copied as tab-delimited format\");\n                    clipboardButton[0].classList.remove(\"plate-setup-button\");\n                    clipboardButton.addClass(\"plate-setup-clicked-button\");\n                    setTimeout(resetClipboardText, 3000);\n                });\n\n                function resetClipboardText() {\n                    clipboardButton.text(\"Copy To Clipboard\");\n                    clipboardButton[0].classList.remove(\"plate-setup-clicked-button\");\n                    clipboardButton.addClass(\"plate-setup-button\");\n                }\n\n                clipboard.on('error', function (e) {\n                    clipboardButton.text(\"Failed to copy table to clipboard: browser may be incompatible\");\n                    setTimeout(resetClipboardText, 3000);\n                });\n\n                overlayContainer.append(buttonContainer);\n                this.bottomContainer.prepend(overlayContainer);\n            }\n        };\n    }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.canvas = function() {\n    //\n    return {\n\n      allSelectedObjects: null, // Contains all the selected objets, when click and drag.\n\n      allPreviouslySelectedObjects: null,\n\n      colorPointer: 0,\n\n      goldenRatio: 0.618033988749895,\n\n      _createCanvas: function() {\n        this.normalCanvas = this._createElement(\"<canvas>\").attr(\"id\", \"DNAcanvas\");\n        $(this.canvasContainer).append(this.normalCanvas);\n      },\n\n      _initiateFabricCanvas: function() {\n        var w = this.canvasContainer.width(); \n        var h = this.canvasContainer.height(); \n\n        this._setCanvasArea(w, h);\n\n        this.mainFabricCanvas = new fabric.Canvas('DNAcanvas', {\n            backgroundColor: '#f5f5f5',\n            selection: false,\n            stateful: false,\n            hoverCursor: \"pointer\",\n            renderOnAddRemove: false,\n          })\n          .setWidth(w)\n          .setHeight(h);\n      },\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.checkBox = function() {\n    // For those check boxes associated with every field in the tab\n    return {\n\n      globalSelectedAttributes: [],\n\n      _addCheckBox: function(field) {\n        var checkImage = $(\"<span>\").html(this._assets.dontImg).addClass(\"plate-setup-tab-check-box bg-light\")\n          .data(\"clicked\", false);\n        checkImage.data(\"linkedFieldId\", field.id);\n        field.root.find(\".plate-setup-tab-field-left-side\").empty().append(checkImage);\n        this._applyCheckboxHandler(checkImage); // Adding handler for change the image when clicked\n        field.checkbox = checkImage;\n      },\n\n      _applyCheckboxHandler: function(checkBoxImage) {\n        // We add checkbox handler here, thing is it s not checkbox , its an image and we change\n        // source\n        var that = this;\n        checkBoxImage.click(function(evt, machineClick) {\n          var checkBox = $(this);\n\n          var changes = {};\n          changes[checkBox.data(\"linkedFieldId\")] = !checkBox.data(\"clicked\");\n\n          that.changeCheckboxes(changes);\n        });\n      },\n\n      changeSubFieldsCheckboxes: function(field, changes) {\n        var that = this;\n        var subFieldToInclude = [];\n\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = checkImage.data(\"clicked\");\n          if (fieldId in changes) {\n            clicked = Boolean(changes[fieldId]);\n          }\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      changeCheckboxes: function(changes) {\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.changeSubFieldsCheckboxes(field, changes);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = checkImage.data(\"clicked\");\n            if (fieldId in changes) {\n              clicked = Boolean(changes[fieldId]);\n            }\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n      },\n\n      setSubFieldCheckboxes: function(field, fieldIds) {\n        var that = this;\n        var subFieldToInclude = [];\n        field.subFieldList.forEach(function(subField) {\n          var checkImage = subField.checkbox;\n          var fieldId = checkImage.data(\"linkedFieldId\");\n          var clicked = fieldIds.indexOf(fieldId) >= 0;\n          checkImage.data(\"clicked\", clicked);\n          if (clicked) {\n            checkImage.html(that._assets.doImg);\n            subFieldToInclude.push(subField.id);\n          } else {\n            checkImage.html(that._assets.dontImg);\n          }\n        });\n        return subFieldToInclude;\n      },\n\n      setCheckboxes: function(fieldIds) {\n        fieldIds = fieldIds || [];\n        var gsa = [];\n        var multiplexCheckedSubField = {};\n\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          if (field.checkbox) {\n            // special handling for multiplex field\n            if (field.subFieldList) {\n              multiplexCheckedSubField[field.id] = this.setSubFieldCheckboxes(field, fieldIds);\n            }\n\n            var checkImage = field.checkbox;\n            var fieldId = checkImage.data(\"linkedFieldId\");\n            var clicked = fieldIds.indexOf(fieldId) >= 0;\n            checkImage.data(\"clicked\", clicked);\n            if (clicked) {\n              gsa.push(fieldId);\n              checkImage.html(this._assets.doImg);\n            } else {\n\n              checkImage.html(this._assets.dontImg);\n            }\n          }\n        }\n        this.globalSelectedMultiplexSubfield = multiplexCheckedSubField;\n        this.globalSelectedAttributes = gsa;\n        this._clearPresetSelection();\n        this._colorMixer();\n      }\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.colorManager = function() {\n\n    return {\n        // See these are color pairs for the gradient.\n      colorPairs: [\n        [\"#e6e6e6\", \"#808080\"],\n        [\"#66e8ff\", \"#0082c8\"],\n        [\"#ff7fb1\", \"#e6194b\"],\n        [\"#a2ffb1\", \"#3cb44b\"],\n        [\"#f784ff\", \"#911eb4\"],\n        [\"#ffe897\", \"#f58231\"],\n        [\"#6666ff\", \"#0000FF\"],\n        [\"#ffff7f\", \"#ffe119\"],\n        [\"#acffff\", \"#46f0f0\"],\n        [\"#ff98ff\", \"#f032e6\"],\n        [\"#ffffa2\", \"#d2f53c\"],\n        [\"#ffffff\", \"#fabebe\"],\n        [\"#66e6e6\", \"#008080\"],\n        [\"#ffffff\", \"#e6beff\"],\n        [\"#ffd48e\", \"#aa6e28\"],\n        [\"#e66666\", \"#800000\"],\n        [\"#ffffff\", \"#aaffc3\"],\n        [\"#e6e666\", \"#808000\"],\n        [\"#ffffff\", \"#ffd8b1\"],\n        [\"#66a9ef\", \"#004389\"],\n        [\"#ff6672\", \"#a7000c\"],\n        [\"#66db72\", \"#00750c\"],\n        [\"#b866db\", \"#520075\"],\n        [\"#ffa966\", \"#b64300\"],\n        [\"#ffff66\", \"#c0a200\"],\n        [\"#6dffff\", \"#07b1b1\"],\n        [\"#ff66ff\", \"#b100a7\"],\n        [\"#f9ff66\", \"#93b600\"],\n        [\"#ffe5e5\", \"#bb7f7f\"],\n        [\"#66a7a7\", \"#004141\"],\n        [\"#ffe5ff\", \"#a77fc0\"],\n        [\"#d19566\", \"#6b2f00\"],\n        [\"#ffffef\", \"#c0bb89\"],\n        [\"#d1ffea\", \"#6bc084\"],\n        [\"#a7a766\", \"#414100\"],\n        [\"#ffffd8\", \"#c09972\"],\n        [\"#a5ffff\", \"#3fc1ff\"],\n        [\"#ffbef0\", \"#ff588a\"],\n        [\"#e1fff0\", \"#7bf38a\"],\n        [\"#ffc3ff\", \"#d05df3\"],\n        [\"#ffffd6\", \"#ffc170\"],\n        [\"#a5a5ff\", \"#3f3fff\"],\n        [\"#ffffbe\", \"#ffff58\"],\n        [\"#ebffff\", \"#85ffff\"],\n        [\"#ffd7ff\", \"#ff71ff\"],\n        [\"#a5ffff\", \"#3fbfbf\"],\n        [\"#ffffcd\", \"#e9ad67\"],\n        [\"#ffa5a5\", \"#bf3f3f\"],\n        [\"#ffffa5\", \"#bfbf3f\"]\n      ]\n    }\n  }\n\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.createCanvasElements = function() {\n    // this class manages creating all the elements within canvas\n    return {\n\n      scaleFactor: 1, \n\n      baseSizes: {\n        spacing: 48, \n        tile_radius: 22, \n        center_radius_complete: 10, \n        center_radius_incomplete: 14, \n        label_size: 14, \n        label_spacing: 24, \n        text_size: 13,\n        stroke: 0.5, \n        gap: 2\n      }, \n\n      _setCanvasArea: function(w, h) {\n        this.scaleFactor = Math.min(\n           h / (this.dimensions.rows * this.baseSizes.spacing + this.baseSizes.label_spacing), \n           w / (this.dimensions.cols * this.baseSizes.spacing + this.baseSizes.label_spacing));\n\n        var sizes = {}\n        for (var prop in this.baseSizes) {\n          sizes[prop] = this.baseSizes[prop] * this.scaleFactor; \n        }\n        this.sizes = sizes; \n      }, \n\n      _canvas: function() {\n        // Those 1,2,3 s and A,B,C s\n        this._fixRowAndColumn();\n\n        // All those circles in the canvas.\n        this._putCircles();\n      },\n\n      _fixRowAndColumn: function() {\n        var cols = this.dimensions.cols;\n        var rows = this.dimensions.rows;\n\n        var spacing = this.sizes.spacing;\n        var d1 = this.sizes.label_spacing / 2;\n        var d2 = this.sizes.label_spacing + this.sizes.spacing / 2; \n        var fontSize = this.sizes.label_size; \n\n        // For column\n        var top = d1; \n        var left = d2;  \n        for (var i = 1; i <= cols; i++) {\n          var tempFabricText = new fabric.IText(i.toString(), {\n            fill: 'black',\n            originX: 'center',\n            originY: 'center',\n            fontSize: fontSize,\n            top: top,\n            left: left,\n            fontFamily: '\"Roboto\", Arial, sans-serif',\n            selectable: false,\n            fontWeight: \"400\"\n          });\n          left += spacing; \n\n          this.mainFabricCanvas.add(tempFabricText);\n        }\n\n        // for row\n        top = d2; \n        left = d1; \n        for (var i = 1; i <= rows; i++) {\n          var tempFabricText = new fabric.IText(this.rowIndex[i-1], {\n            fill: 'black',\n            originX: 'center',\n            originY: 'center',\n            fontSize: fontSize,\n            top: top,\n            left: left,\n            fontFamily: '\"Roboto\", Arial, sans-serif',\n            selectable: false,\n            fontWeight: \"400\"\n          });\n          top += spacing; \n\n          this.mainFabricCanvas.add(tempFabricText);\n        }\n      },\n\n      _putCircles: function() {\n        var cols = this.dimensions.cols;\n        var rows = this.dimensions.rows;\n\n        var tileCounter = 0;\n        for (var row = 0; row < rows; row++) {\n          for (var col = 0; col < cols; col++) {\n            var index = this.allTiles.length; \n            var tile = this._createTile(row, col); \n            tile.index = tileCounter++; \n            this.allTiles.push(tile);\n            this.mainFabricCanvas.add(tile.background);\n            this.mainFabricCanvas.add(tile.highlight);\n            this.mainFabricCanvas.add(tile.circle);\n            this.mainFabricCanvas.add(tile.circleCenter);\n            this.mainFabricCanvas.add(tile.circleText);\n          }\n        }\n\n        this._addLargeRectangleOverlay();\n        this._fabricEvents();\n      },\n\n      _createTile: function (row, col) {\n        var tile = {}; \n\n        tile.visible = false; \n        tile.colorIndex = null; \n        tile.row = row; \n        tile.col = col; \n        tile.address = this.rowIndex[row] + (col + 1); \n\n        var top = (row + 1) * this.sizes.spacing;\n        var left = (col + 1) * this.sizes.spacing; \n\n        tile.background = new fabric.Circle({\n          top: top,\n          left: left,\n          radius: this.sizes.tile_radius,\n          originX: 'center',\n          originY: 'center',\n          hasControls: false,\n          hasBorders: false,\n          lockMovementX: true,\n          lockMovementY: true,\n          evented: false,\n        });\n\n        tile.background.setGradient(\"fill\", {\n          type: \"radial\",\n          x1: this.sizes.tile_radius, \n          x2: this.sizes.tile_radius, \n          y1: this.sizes.tile_radius + this.sizes.gap,\n          y2: this.sizes.tile_radius + this.sizes.gap,\n          r1: this.sizes.tile_radius - this.sizes.gap,\n          r2: this.sizes.tile_radius,\n          colorStops: {\n            0: 'rgba(0,0,0,0.1)',\n            1: 'rgba(0,0,0,0.2)'\n          }\n        });\n\n        tile.highlight = new fabric.Rect({\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          width: this.sizes.spacing,\n          height: this.sizes.spacing,\n          fill: \"rgba(0,0,0,0.4)\",\n          evented: false,\n          visible: false\n        });\n\n        tile.circle = new fabric.Circle({\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          radius: this.sizes.tile_radius,\n          stroke: 'gray',\n          strokeWidth: this.sizes.stroke,\n          evented: false, \n          visible: false\n        });\n\n        tile.circleCenter = new fabric.Circle({\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          radius: this.sizes.center_radius_incomplete,\n          fill: \"white\",\n          stroke: 'gray',\n          strokeWidth: this.sizes.stroke,\n          evented: false,\n          visible: false\n        });\n\n        tile.circleText = new fabric.IText(\"\", {\n          originX: 'center',\n          originY: 'center',\n          top: top,\n          left: left,\n          fill: 'black',\n          fontFamily: '\"Roboto\", Arial, sans-serif',\n          fontSize: this.sizes.text_size,\n          lockScalingX: true,\n          lockScalingY: true,\n          evented: false,\n          visible: false\n        });\n\n        return tile; \n      }, \n\n      setTileComplete: function (tile, complete) {\n        if (complete) {\n          tile.circleCenter.radius = this.sizes.center_radius_complete;\n          tile.circleText.fill = \"black\";\n          tile.circleText.fontWeight = 'normal';\n        } else {\n          tile.circleCenter.radius = this.sizes.center_radius_incomplete;\n          tile.circleText.fill = \"red\";\n          tile.circleText.fontWeight = 'bold';\n        }\n      }, \n\n      setTileVisible: function (tile, visible) {\n        tile.visible = visible;\n        tile.circle.visible = tile.visible;\n        tile.circleCenter.visible = tile.visible;\n        tile.circleText.visible = tile.visible;\n      },\n\n      setTileColor: function(tile, color, stackPointer) {\n        this.setTileVisible(tile, true);\n        tile.colorIndex = parseInt(color); \n        tile.circleText.text = String(tile.colorIndex);\n\n        if (color > 0) {\n          color = ((color - 1) % (this.colorPairs.length -1)) + 1;\n        }\n        var colorStops = this.colorPairs[color];\n\n        tile.circle.setGradient(\"fill\", {\n          y2: 2 * this.sizes.tile_radius,\n          colorStops: colorStops\n        });\n      },\n\n      _addLargeRectangleOverlay: function() {\n\n        this.overLay = new fabric.Rect({\n          width: 632,\n          height: 482,\n          left: 0,\n          top: 0,\n          opacity: 0.0,\n          originX: 'left',\n          originY: 'top',\n          lockMovementY: true,\n          lockMovementX: true,\n          selectable: false\n        });\n\n        this.mainFabricCanvas.add(this.overLay);\n      }\n    };\n  }\n})(jQuery, fabric);\n","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.createField = function() {\n    // It create those fields in the tab , there is 4 types of them.\n    return {\n\n      _createField: function(field) {\n        switch (field.data.type) {\n          case \"text\":\n            this._createTextField(field);\n            break;\n\n          case \"numeric\":\n            this._createNumericField(field);\n            break;\n\n          case \"select\":\n            this._createSelectField(field);\n            break;\n\n          case \"multiselect\":\n            this._createMultiSelectField(field);\n            break;\n\n          case \"boolean\":\n            this._createBooleanField(field);\n            break;\n\n          case \"multiplex\":\n            this._createMultiplexField(field);\n            break;\n        }\n      },\n\n      _createTextField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<input>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-input\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        field.parseValue = function(v) {\n          if (v) {\n            v = String(v);\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          var v = input.val().trim();\n          if (v == \"\") {\n            v = null;\n          }\n          return v;\n        };\n\n        field.setValue = function(v) {\n          input.val(v);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v;\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"input\", function(e, generated) {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createOpts: function(config) {\n        var opts = {\n          allowClear: true,\n          placeholder: \"select\",\n          minimumResultsForSearch: 10\n        };\n\n        if (config.options) {\n          opts.data = config.options;\n        } else if (config.query) {\n          var query = config.query;\n          if (config.delay) {\n            query = this._debounce(config.delay, query);\n          }\n          opts.query = query;\n        } else {\n          throw \"Must specify data or query\";\n        }\n        return opts;\n      },\n\n      _createSelectField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<input/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        var opts = that._createOpts(field.data);\n        var optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[opt.id] = opt;\n        });\n\n        input.select2(opts);\n\n        field.parseValue = function(value) {\n          var v = value;\n\n          if (v == \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          if (v in optMap) {\n            return optMap[v].id;\n          } else {\n            throw \"Invalid value \" + value + \" for select field \" + id;\n          }\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.getValue = function() {\n          var v = input.select2('data');\n          return v ? v.id : null;\n        };\n\n        field.setValue = function(v) {\n          if (v) {\n            v = optMap[v];\n          }\n          input.select2('data', v);\n        };\n\n        field.setOpts = function(v) {\n          input.select2('data', {});\n          opts.data = v || [];\n          input.select2(opts);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return optMap[v].text;\n        };\n\n        field.parseText = function(value) {\n          var v = value;\n\n          if (v == \"\") {\n            v = null;\n          }\n          if (v == null) {\n            return null;\n          }\n          if (v in optMap) {\n            return optMap[v].text;\n          } else {\n            throw \"Invalid text value \" + value + \" for select field \" + id;\n          }\n        };\n\n        input.on(\"change\", function(e, generated) {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiSelectField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<input/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-multiselect-field\");\n        input.attr(\"multiple\", \"multiple\");\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        var separator = \",\";\n        var opts = that._createOpts(field.data);\n        opts.multiple = true;\n        var optMap = {};\n        opts.data.forEach(function(opt) {\n          optMap[opt.id] = opt;\n        });\n        input.select2(opts);\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseValue = function(value) {\n          var v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              if (opt in optMap) {\n                return optMap[opt].id;\n              } else {\n                throw \"Invalid value \" + opt + \" for multiselect field \" + id;\n              }\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.setOpts = function(v) {\n          var allOpts = field.data.options;\n          var selectedVal = [];\n          for (var id in allOpts) {\n            var curOpts = allOpts[id];\n            if (v.indexOf(curOpts[\"id\"]) >= 0) {\n              selectedVal.push(curOpts);\n            }\n          }\n\n          opts.data = selectedVal;\n          input.select2(opts);\n        };\n\n        field.getValue = function() {\n          var v = input.select2('data');\n          if (v.length) {\n            return v.map(function(i) {\n              return i.id;\n            });\n          }\n          return null;\n        };\n\n        field.setValue = function(v) {\n          v = v || [];\n          v = v.map(function(i) {\n            return optMap[i];\n          });\n          input.select2('data', v);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          if (v.length > 0) {\n            return v.map(function(v) {\n              return optMap[v].text\n            }).join(\"; \");\n          }\n          return \"\";\n        };\n\n        field.multiOnChange = function (added, removed) {\n          if (added) {\n            added = added.id.toString();\n          }\n          if (removed) {\n            removed = removed.id.toString();\n          }\n          var data = {\n          };\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n\n          that._addAllData(data);\n        };\n\n        field.parseText = function(value){\n          var v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              if (opt in optMap) {\n                return optMap[opt].text;\n              } else {\n                throw \"Invalid text value \" + opt + \" for multiselect field \" + id;\n              }\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        input.on(\"change\", function(e, generated) {\n          var added = e.added;\n          var removed = e.removed;\n          //field.onChange();\n          field.multiOnChange(added, removed);\n        });\n\n        field.input = input;\n\n        that._createDeleteButton(field);\n      },\n\n      _createNumericField: function(field) {\n        var id = field.id;\n        var data = field.data;\n        var that = this;\n        var input = this._createElement(\"<input>\").addClass(\"plate-setup-tab-input\")\n          .attr(\"placeholder\", data.placeholder || \"\").attr(\"id\", id);\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        that.defaultWell[id] = null;\n\n        // Adding unit\n        var units = data.units || [];\n        var defaultUnit = data.defaultUnit || null;\n        var unitInput = null;\n        if (defaultUnit) {\n          if (units.length) {\n            if (units.indexOf(defaultUnit) < 0) {\n              defaultUnit = units[0];\n            }\n          } else {\n            units = [defaultUnit];\n          }\n        } else {\n          if (units.length) {\n            defaultUnit = units[0];\n          }\n        }\n\n        if (units.length) {\n          field.units = units;\n          field.hasUnits = true;\n          field.defaultUnit = defaultUnit;\n          if (units.length == 1) {\n            var unitText = $(\"<div></div>\").addClass(\"plate-setup-tab-unit\");\n            unitText.text(defaultUnit);\n            field.root.find(\".plate-setup-tab-field-container\").append(unitText);\n          } else {\n            unitInput = this._createElement(\"<input/>\").attr(\"id\", id)\n              .addClass(\"plate-setup-tab-label-select-field\");\n\n            field.root.find(\".plate-setup-tab-field-container\").append(unitInput);\n\n            var selected = null;\n            var unitData = units.map(function(unit) {\n              var o = {\n                id: unit,\n                text: unit\n              };\n              if (unit == defaultUnit) {\n                selected = o;\n              }\n              return o;\n            });\n\n            var opts = {\n              data: unitData,\n              allowClear: false,\n              minimumResultsForSearch: 10\n            };\n\n            unitInput.select2(opts);\n            unitInput.select2(\"data\", selected);\n          }\n        }\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          if (unitInput) {\n            unitInput.prop(\"disabled\", bool);\n          }\n        };\n\n        field.setUnitOpts = function(opts) {\n          field.units = opts || null;\n          field.defaultUnit = null;\n\n          var newUnits = [];\n          var selected = null;\n          if (field.units && field.units.length) {\n            field.defaultUnit = field.units[0];\n            newUnits = field.units.map(function(curUnit) {\n              var cleanUnit = {\n                id: curUnit,\n                text: curUnit\n              };\n              if (curUnit == field.defaultUnit) {\n                selected = cleanUnit;\n              }\n              return cleanUnit;\n            });\n          }\n\n          var newOpts = {\n            data: newUnits,\n            allowClear: false,\n            minimumResultsForSearch: 10\n          };\n          unitInput.select2(newOpts);\n          unitInput.select2(\"data\", selected);\n        };\n\n        field.parseValue = function(value) {\n          var v;\n          if ($.isPlainObject(value)) {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value.value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.parseUnit(value.unit)\n              };\n            } else {\n              throw \"Value must be plain numeric for numeric field \" + id;\n            }\n          } else {\n            if (field.hasUnits) {\n              v = field.parseRegularValue(value);\n              if (v === null) {\n                return null;\n              }\n              return {\n                value: v,\n                unit: field.defaultUnit\n              };\n            } else {\n              return field.parseRegularValue(value);\n            }\n          }\n        };\n\n        field.getValue = function() {\n          var v = field.getRegularValue();\n\n          if ((v === null) || isNaN(v)) {\n            return null;\n          } else if (field.hasUnits) {\n            var returnVal = {\n              value: v,\n              unit: field.getUnit()\n            };\n\n            if (field.data.hasMultiplexUnit) {\n              // include unitTypeId and UnitId to returnVal\n              for (var unitTypeKey in field.data.unitMap) {\n                var unitTypeUnits = field.data.unitMap[unitTypeKey];\n                unitTypeUnits.forEach(function(unit) {\n                  if (unit.text === returnVal.unit) {\n                    returnVal['unitTypeId'] = unitTypeKey;\n                    returnVal['unitId'] = unit.id;\n                  }\n                })\n              }\n            }\n            return returnVal;\n          } else {\n            return v;\n          }\n        };\n\n        field.setValue = function(value) {\n          if (field.hasUnits) {\n            if ($.isPlainObject(value)) {\n              field.setUnit(value.unit || field.defaultUnit);\n              field.setRegularValue(value.value);\n\n            } else {\n              field.setRegularValue(value);\n              field.setUnit(field.defaultUnit)\n            }\n          } else {\n            field.setRegularValue(value);\n          }\n        };\n\n        field.parseRegularValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          var v = String(value).trim();\n          if (v === \"\") {\n            return null;\n          }\n          v = Number(value);\n          if (isNaN(v)) {\n            throw \"Invalid value \" + value + \" for numeric field \" + id;\n          }\n          return v;\n        };\n\n        field.getRegularValue = function() {\n          var v = input.val().trim();\n          if (v == \"\") {\n            v = null;\n          } else {\n            v = Number(v);\n          }\n          return v;\n        };\n\n        field.setRegularValue = function(value) {\n          input.val(value);\n        };\n\n        field.parseUnit = function(unit) {\n          if (unit == null || unit === \"\") {\n            return field.defaultUnit;\n          }\n          for (var i = 0; i < units.length; i++) {\n            if (unit.toLowerCase() == units[i].toLowerCase()) {\n              return units[i];\n            }\n          }\n          throw \"Invalid unit \" + unit + \" for field \" + id;\n        };\n\n        field.getUnit = function() {\n          if (unitInput) {\n            return unitInput.val();\n          } else {\n            return field.defaultUnit;\n          }\n        };\n\n        field.setUnit = function(unit) {\n          if (unitInput) {\n            unit = unit || field.defaultUnit;\n            if (unit != null) {\n              unit = {\n                id: unit,\n                text: unit\n              };\n            }\n            unitInput.select2(\"data\", unit);\n          }\n        };\n\n        // val now contains unit\n        field.getText = function(val) {\n          if (typeof(val) === 'object' && val) {\n            var v = val.value;\n            var u = val.unit;\n            if (v == null) {\n              return \"\";\n            }\n            v = v.toString();\n            if (!u) {\n              u = defaultUnit;\n            }\n            if (u) {\n              v = v + \" \" + u;\n            }\n            return v;\n          } else {\n            return field.getRegularText(val);\n          }\n        };\n\n        field.getRegularText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          v = v.toString();\n          return v;\n        };\n\n        field.parseText = function(v){\n          var textVal = field.parseValue(v);\n          if (textVal && typeof(textVal) === \"object\"){\n            return textVal.value + textVal.unit;\n          } else if (textVal) {\n            return textVal\n          } else {\n            return null;\n          }\n        };\n\n        input.on(\"input\", function() {\n          var v = field.getRegularValue();\n          if (isNaN(v)) {\n            //flag field as invalid\n            input.addClass(\"invalid\");\n          } else {\n            input.removeClass(\"invalid\");\n          }\n          field.onChange();\n        });\n        if (unitInput) {\n          unitInput.on(\"change\", function() {\n            field.onChange();\n          });\n        }\n\n        field.input = input;\n        field.unitInput = unitInput;\n      },\n\n      _createBooleanField: function(field) {\n        var id = field.id;\n        var that = this;\n        var input = this._createElement(\"<input/>\").attr(\"id\", id)\n          .addClass(\"plate-setup-tab-select-field\");\n        that.defaultWell[id] = null;\n\n        field.root.find(\".plate-setup-tab-field-container\").append(input);\n        var tval = {\n          id: \"true\",\n          text: \"true\"\n        };\n        var fval = {\n          id: \"false\",\n          text: \"false\"\n        };\n        var opts = {\n          data: [tval, fval],\n          placeholder: \"select\",\n          allowClear: true,\n          minimumResultsForSearch: -1,\n          initSelection: function(element, callback) {\n            var v = element.val();\n            callback({\n              id: v,\n              text: v\n            });\n          }\n        };\n\n        input.select2(opts);\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n        };\n\n        field.parseValue = function(value) {\n          if (value == null) {\n            return null;\n          }\n          var v = String(value).trim().toLowerCase();\n          if (v == \"true\") {\n            v = true;\n          } else if (v == \"false\") {\n            v = false;\n          } else if (v == \"\") {\n            v = null;\n          } else {\n            throw \"Invalid value \" + value + \" for boolean field \" + id;\n          }\n          return v;\n        };\n\n        field.getValue = function() {\n          var v = input.val();\n          switch (v) {\n            case \"true\":\n              return true;\n            case \"false\":\n              return false;\n            default:\n              return null;\n          }\n        };\n\n        field.setValue = function(v) {\n          if (v == true || v == \"true\") {\n            v = tval;\n          } else if (v == false || v == \"false\") {\n            v = fval;\n          } else {\n            v = null;\n          }\n          input.select2('data', v);\n        };\n\n        field.getText = function(v) {\n          if (v == null) {\n            return \"\";\n          }\n          return v.toString();\n        };\n\n        field.parseText = field.parseValue;\n\n        input.on(\"change\", function(e) {\n          field.onChange();\n        });\n\n        field.input = input;\n      },\n\n      _createMultiplexField: function(field) {\n        var that = this;\n        // make correct multiplex data\n        this._createMultiSelectField(field);\n        // overwrite default well for multiplex field\n        that.defaultWell[field.id] = [];\n\n        // single select\n        var nameContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-name-singleSelect\").text(\"Select to edit\");\n        var fieldContainer1 = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab-field-container-singleSelect\");\n        field.root.find(\".plate-setup-tab-field-right-side\").append(nameContainer1, fieldContainer1);\n\n        field.singleSelect = this._createElement(\"<input/>\").attr(\"id\", field.id + \"SingleSelect\")\n          .addClass(\"plate-setup-tab-multiplex-single-select-field\");\n\n        field.singleSelect.appendTo(fieldContainer1);\n\n        field.singleSelectValue = function () {\n          var v = field.singleSelect.select2(\"data\");\n          if (v != null) {\n            v = v.id;\n          }\n          return v;\n        };\n\n        var setSingleSelectOptions = function (v, selected_v) {\n          var opts = {\n            allowClear: false,\n            placeholder: \"select\",\n            minimumResultsForSearch: 10,\n            data: v || []\n          }\n          if (!selected_v) {\n            if (opts.data.length) {\n              selected_v = opts.data[0];\n            } else {\n              selected_v = null;\n            }\n          }\n          field.singleSelect.select2('data', []);\n          field.singleSelect.select2(opts);\n          field.singleSelect.select2('data', selected_v);\n          field.singleSelect.prop(\"disabled\", opts.data.length == 0);\n        };\n\n        var singleSelectChange = function () {\n          var v = field.singleSelectValue();\n\n          field.updateSubFieldUnitOpts(v);\n\n          var curData = field.detailData || [];\n          var curSubField = null;\n          curData.forEach(function(val) {\n            if (val[field.id] === v) {\n              curSubField = val;\n            }\n          });\n\n          if (curSubField) {\n            // setvalue for subfield\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(false);\n              subField.setValue(curSubField[subField.id]);\n            });\n          } else {\n            field.subFieldList.forEach(function(subField) {\n              subField.disabled(true);\n              subField.setValue(null);\n            });\n          }\n          that.readOnlyHandler();\n        };\n\n        setSingleSelectOptions([]);\n\n        field.singleSelect.on(\"change\", singleSelectChange);\n\n        field._changeMultiFieldValue = function(added, removed) {\n          var newSubFieldValue = {};\n          for (var subFieldName in field.data.multiplexFields) {\n            var subFieldId = field.data.multiplexFields[subFieldName].id;\n            newSubFieldValue[subFieldId] = null;\n          }\n\n          var val;\n          if (added) {\n            if (added.value) {\n              val = added.value;\n            } else {\n              newSubFieldValue[field.id] = added.id;\n              val = newSubFieldValue;\n            }\n            added = {\n              id: added.id,\n              value: val\n            };\n          }\n\n          if (removed) {\n            if (removed.value){\n              val = removed.value;\n            } else {\n              newSubFieldValue[field.id] = removed.id;\n              val = newSubFieldValue;\n            }\n            removed = {\n              id: removed.id,\n              value: val\n            };\n          }\n\n          var data = {};\n          data[field.id] = {\n            multi: true,\n            added: added,\n            removed: removed\n          };\n          that._addAllData(data);\n        };\n\n        var multiselectSetValue = field.setValue;\n\n        // overwrite multiplex set value\n        field.setValue = function(v) {\n          // used to keep track of initially loaded multiplex data\n          field.detailData = v;\n          var multiselectValues = null;\n          if (v && v.length) {\n            multiselectValues = v.map(function(val) {\n              return val[field.id]\n            });\n          }\n\n          multiselectSetValue(multiselectValues);\n          var newOptions = field.input.select2('data') || [];\n          setSingleSelectOptions(newOptions);\n          singleSelectChange();\n        };\n\n        field.disabled = function(bool) {\n          field.input.prop(\"disabled\", bool);\n          field.subFieldList.forEach(function(subField) {\n            subField.disabled(bool);\n          });\n          if (bool) {\n            nameContainer1.text(\"Select to inspect\");\n          } else {\n            nameContainer1.text(\"Select to edit\");\n          }\n        };\n\n        field.parseValue = function(value) {\n          var v = value;\n          if (v && v.length) {\n            v = v.map(function(opt) {\n              var valMap = {};\n              valMap[field.id] = opt[field.id];\n              for (var subFieldId in opt) {\n                field.subFieldList.forEach(function(subField) {\n                  if (subField.id === subFieldId) {\n                    valMap[subField.id] = subField.parseValue(opt[subFieldId]);\n                  }\n                });\n              }\n              return valMap;\n            });\n          } else {\n            v = null;\n          }\n          return v;\n        };\n\n        field.updateSubFieldUnitOpts = function(val) {\n          var curOpts;\n          field.data.options.forEach(function(opt) {\n            if (opt.id === val) {\n              curOpts = opt;\n            }\n          });\n          field.subFieldList.forEach(function(subField) {\n            if (subField.data.hasMultiplexUnit) {\n              if (curOpts && curOpts.hasOwnProperty(\"unitOptions\")) {\n\t\t\t\t\t\t\t\tsubField.setUnitOpts(curOpts.unitOptions[subField.id]);\n              } else {\n                subField.setUnitOpts(null);\n              }\n            }\n          })\n        };\n\n        field.multiOnChange = function(added, removed) {\n          field._changeMultiFieldValue(added, removed);\n          var v = field.getValue();\n          var curData = field.detailData;\n          var curIds = [];\n          var curOpt = null;\n          //reshape data for saveback\n          if (curData) {\n            curIds = curData.map(function(val) {\n              return val[field.id]\n            });\n          }\n\n          var newMultiplexVal = [];\n          var selectList = [];\n          if (v) {\n            v.forEach(function(selectedVal) {\n              if (curData) {\n                curData.forEach(function(val) {\n                  if (val[field.id] === selectedVal) {\n                    newMultiplexVal.push(val)\n                  }\n                });\n              }\n              // cases when adding new data\n              if (curIds.indexOf(selectedVal) < 0) {\n                var newVal = {};\n                newVal[field.id] = selectedVal;\n\n                field.updateSubFieldUnitOpts(selectedVal);\n                field.subFieldList.forEach(function(subfield) {\n                  // special handling for subfield which has multiplexUnit\n                  if (subfield.hasUnits) {\n                    if (subfield.data.hasMultiplexUnit) {\n                      subfield.disabled(false);\n                      field.data.options.forEach(function(opt) {\n                        if (opt.id === selectedVal) {\n                          var val = {\n                            value: null,\n                            unit: subfield.units[0]\n                          };\n                          newVal[subfield.id] = subfield.parseValue(val);\n                        }\n                      });\n                    } else {\n                      if (subfield.data.units) {\n                        if (subfield.data.units.length > 1){\n                          subfield.disabled(false);\n                        }\n                      }\n                      var val = {\n                        value: null,\n                        unit: subfield.defaultUnit\n                      };\n                      newVal[subfield.id] = subfield.parseValue(val);\n                    }\n                  }\n                   else {\n                    newVal[subfield.id] = subfield.parseValue(null);\n                  }\n                });\n                newMultiplexVal.push(newVal);\n              }\n            });\n\n            // make data for single select options\n            v.forEach(function(selectId) {\n              field.data.options.forEach(function(opt) {\n                if (opt.id === selectId) {\n                  selectList.push(opt);\n                }\n              });\n            });\n            // set the newest selected to be the current obj\n            curOpt = selectList[v.length - 1];\n          }\n\n          field.detailData = newMultiplexVal;\n          setSingleSelectOptions(selectList, curOpt);\n          singleSelectChange();\n        };\n\n        field.getText = function(v) {\n          if (v === null) {\n            return \"\";\n          }\n          // get subfields that is selected from the checkbox\n          if (field.id in that.globalSelectedMultiplexSubfield) {\n            var checkedSubfields = that.globalSelectedMultiplexSubfield[field.id];\n            var returnVal = [];\n            for (var valIdx in v) {\n              var subV = v[valIdx];\n              var subText = [];\n              for (var optId in field.data.options) {\n                var opt = field.data.options[optId];\n                if (opt.id === subV[field.id]) {\n                  subText.push(opt.text);\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                if (checkedSubfields.indexOf(subField.id) >= 0) {\n                  var x = subField.getText(subV[subField.id]);\n                  subText.push(subField.name + \": \" + x);\n                }\n              });\n              returnVal.push(\"{\" + subText.join(\", \") + \"}\");\n            }\n            return returnVal.join(\";\");\n          }\n        };\n\n        field.parseText = function(v) {\n          if (v === null) {\n            return \"\";\n          } else {\n            var returnVal = [];\n            for (var valIdx in v) {\n              var subV = v[valIdx];\n              var subText = [];\n              for (var optId in field.data.options) {\n                var opt = field.data.options[optId];\n                if (opt.id === subV[field.id]) {\n                  subText.push(opt.text);\n                }\n              }\n              field.subFieldList.forEach(function(subField) {\n                var x = subField.getText(subV[subField.id]);\n                if (x) {\n                  subText.push(x);\n                }\n              });\n              returnVal.push(subText);\n            }\n            return returnVal;\n          }\n        };\n\n        field.checkMultiplexCompletion = function(valList) {\n          var valCount = 0;\n          var completionPct = 0;\n          var include = false;\n          function getSubfieldStatus (vals) {\n            var req = 0;\n            var fill = 0;\n            for (var subFieldId in field.subFieldList) {\n              var subField = field.subFieldList[subFieldId];\n              var curVal = vals[subField.id];\n              if (subField.required) {\n                include = true;\n                req++;\n                if (typeof(curVal) === 'object' && curVal) {\n                  if (curVal.value) {\n                    fill++;\n                  }\n                } else if (curVal) {\n                  fill++;\n                }\n              }\n            }\n            return fill/req;\n          }\n\n          // for cases has value in multiplex field\n          if (valList) {\n            if (valList.length > 0){\n              for (var idx in valList) {\n                valCount++;\n                var vals = valList[idx];\n                completionPct += getSubfieldStatus(vals);\n              }\n            } else if (field.required) {\n              include = true;\n              valCount = 1;\n            }\n          }  else if (field.required) {\n            include = true;\n            valCount = 1;\n          }\n\n          return {\n            include: include,\n            completionPct: completionPct/valCount\n          };\n        };\n\n        // valList contains all of the vals for selected val\n        field.applyMultiplexSubFieldColor = function(valList){\n          function updateSubFieldWarningMap (vals) {\n            for (var subFieldId in field.subFieldList) {\n              var subField = field.subFieldList[subFieldId];\n              // loop through each well's multiplexval list\n              if (vals === null){\n                if (field.required && subField.required){\n                  subFieldWarningMap[subField.id].warningStatus.push(true);\n                }\n              } else if (typeof(vals) === \"object\") {\n                if (vals.length === 0) {\n                  if (field.required && subField.required){\n                    subFieldWarningMap[subField.id].warningStatus.push(true);\n                  }\n                } else {\n                  for (var multiplexIdx in vals) {\n                    var curVal = vals[multiplexIdx][subField.id];\n                    if (subField.required) {\n                      if (typeof(curVal) === 'object' && curVal) {\n                        if (!curVal.value) {\n                          subFieldWarningMap[subField.id].warningStatus.push(true);\n                        } else {\n                          subFieldWarningMap[subField.id].warningStatus.push(false);\n                        }\n                      } else if (!curVal) {\n                        subFieldWarningMap[subField.id].warningStatus.push(true);\n                      } else {\n                        subFieldWarningMap[subField.id].warningStatus.push(false);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          var subFieldWarningMap = {};\n          field.subFieldList.forEach(function(subField){\n            if (subField.required) {\n              subFieldWarningMap[subField.id] = {\n                field: subField,\n                warningStatus: []\n              };\n            }\n          });\n\n          valList.forEach(function(multiplexVals) {\n            updateSubFieldWarningMap(multiplexVals);\n          });\n          // turn off main field when all subfield are filled\n\n          var requiredSubField = [];\n          var mainFieldStatus = [];\n          for (var subFieldId in subFieldWarningMap){\n            var subField = subFieldWarningMap[subFieldId].field;\n            if (subFieldWarningMap[subFieldId].warningStatus.indexOf(true) >= 0) {\n              var text =  subField.name + \" is a required subfield for \" + field.name + \", please make sure all \" + field.name + \" have \" + subField.name;\n              if (field.required){\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              } else {\n                that.fieldWarningMsg(subField, text, true);\n                mainFieldStatus.push(true);\n              }\n            } else {\n              that.fieldWarningMsg(subField, \"none\", false);\n              mainFieldStatus.push(false);\n            }\n          }\n          var mainFieldWarning = false;\n          if (mainFieldStatus.indexOf(true) < 0) {\n            mainFieldWarning = false;\n          } else {\n            mainFieldWarning = true;\n          }\n          var warningText;\n          if (field.required) {\n            warningText = field.name + \" is a required field, please also fix missing required subfield(s) below\";\n          } else {\n            warningText = field.name + \" is not a required field, please fix missing required subfield(s) below or remove selected \" + field.name;\n          }\n          that.fieldWarningMsg(field, warningText, mainFieldWarning);\n        };\n\n        field.parseMainFieldVal = function(val) {\n          var optMap = field.data.options;\n          for (var idx = 0; idx < optMap.length; idx++){\n            var curOpt = optMap[idx];\n            if (curOpt.id === val){\n              return curOpt.text\n            }\n          }\n        };\n      },\n\n      _deleteDialog: function (field) {\n        var that = this;\n\n        var valMap = field.allSelectedMultipleVal;\n        var valToRemove;\n        if (valMap) {\n          valToRemove = Object.keys(valMap);\n        } else {\n          valToRemove = [];\n        }\n\n\n        var dialogDiv = $(\"<div/>\").addClass(\"delete-dialog modal\");\n        $('body').append(dialogDiv);\n\n        function killDialog() {\n          dialogDiv.hide();\n          dialogDiv.remove();\n        }\n\n        var dialogContent = $(\"<div/>\").addClass(\"modal-content\").appendTo(dialogDiv);\n        var tableArea = $(\"<div/>\").appendTo(dialogContent);\n        var buttonRow = $(\"<div/>\").addClass(\"dialog-buttons\").css(\"justify-content\", \"flex-end\").appendTo(dialogContent);\n\n        if (valToRemove.length > 0){\n          // apply CSS property for table\n          $(\"<p/>\").text(field.name + \" in selected wells: choose items to delete and click the delete button below\").appendTo(tableArea);\n\n          var table = that._deleteDialogTable(field, valMap);\n          table.appendTo(tableArea);\n          table.addClass(\"plate-popout-table\");\n          table.find('td').addClass(\"plate-popout-td\");\n          table.find('th').addClass(\"plate-popout-th\");\n          table.find('tr').addClass(\"plate-popout-tr\");\n          if (!that.readOnly) {\n            var deleteCheckedButton = $(\"<button class='multiple-field-manage-delete-button'>Delete Checked Items</button>\");\n            buttonRow.append(deleteCheckedButton);\n            deleteCheckedButton.click(function() {\n              table.find(\"input:checked\").each(function () {\n                var val = this.value;\n                field.multiOnChange(null, {id: val});\n              });\n              // refresh selected fields after updating the multiplex field value\n              that.decideSelectedFields();\n              killDialog();\n            });\n          }\n\n        } else {\n          $(\"<p/>\").text(\"No \" + field.name + \" in the selected wells\").appendTo(tableArea);\n        }\n\n        var cancelButton = $(\"<button>Cancel</button>\");\n        buttonRow.append(cancelButton);\n        cancelButton.click(killDialog);\n\n        dialogDiv.show();\n\n        window.onclick = function(event) {\n          if (event.target == dialogDiv[0]) {\n            killDialog();\n          }\n        }\n      },\n\n      _deleteDialogTable: function (field, valMap) {\n        var that = this;\n        var colName = [field.name, \"Counts\"]; //Added because it was missing... no idea what the original should have been\n        if (!that.readOnly) {\n          colName.push(\"Delete\");\n        }\n        var table = $('<table/>');\n        var thead = $('<thead/>').appendTo(table);\n        var tr = $('<tr/>').appendTo(thead);\n\n        tr.append(colName.map(function (text) {\n          return $('<th/>').text(text);\n        }));\n\n        var tbody = $(\"<tbody/>\").appendTo(table);\n\n        field.data.options.forEach(function (opt) {\n          if (opt.id in valMap) {\n            var tr = $('<tr/>').appendTo(tbody);\n            var checkbox = $(\"<input type='checkbox'>\").prop(\"value\", opt.id);\n            $(\"<td/>\").text(opt.text).appendTo(tr);\n            $(\"<td/>\").text(valMap[opt.id]).appendTo(tr);\n            if (!that.readOnly) {\n              $(\"<td/>\").append(checkbox).appendTo(tr);\n            }\n          }\n        });\n\n        return table;\n      },\n\n      _createDeleteButton: function (field) {\n        var that = this;\n        var deleteButton = $(\"<button/>\").addClass(\"plate-setup-remove-all-button\");\n        deleteButton.id = field.id + \"Delete\";\n        deleteButton.text(\"Manage \" + field.name + \"...\");\n        var buttonContainer = that._createElement(\"<div></div>\").addClass(\"plate-setup-remove-all-button-container\");\n        buttonContainer.append(deleteButton);\n\n        field.deleteButton = deleteButton;\n        field.root.find(\".plate-setup-tab-field-right-side\").append(buttonContainer);\n\n        deleteButton.click(function () {\n          that._deleteDialog(field);\n        });\n      }\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.engine = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateLayOutWidget and 'this' points to engine\n    // Use THIS to refer parent this.\n    return {\n      engine: {\n\n        derivative: {},\n        colorMap: new Map(),\n        stackUpWithColor: {},\n        stackPointer: 2,\n\n        wellEmpty: function (well) {\n          for (var prop in well) {\n            var curVal = well[prop];\n            if (curVal !== null && curVal !== undefined) {\n              if (Array.isArray(curVal)) {\n                if (curVal.length > 0) {\n                  return false;\n                }\n              } else {\n                return false;\n              }\n            }\n          }\n          return true;\n        },\n\n        searchAndStack: function() {\n          // This method search and stack the change we made.\n          this.stackUpWithColor = {};\n          this.stackPointer = 1;\n          var derivativeJson = {};\n          for (var idx in this.derivative) {\n            var data = this.derivative[idx];\n            var wellData = {};\n            for (var i = 0; i < THIS.globalSelectedAttributes.length; i++) {\n              var attr = THIS.globalSelectedAttributes[i]; \n\n              if (attr in THIS.globalSelectedMultiplexSubfield){\n                var selectedSubFields = THIS.globalSelectedMultiplexSubfield[attr];\n                var newMultiplexVal = [];\n                for (var multiplexIdx in data[attr]){\n                  var curMultiplexVals = data[attr][multiplexIdx];\n                  var newVal = {};\n                  newVal[attr] = curMultiplexVals[attr];\n                  selectedSubFields.forEach(function (subFieldId) {\n                    newVal[subFieldId] = curMultiplexVals[subFieldId];\n                  });\n                  newMultiplexVal.push(newVal);\n                }\n                wellData[attr] = newMultiplexVal;\n              } else {\n                if (data[attr] != null) {\n                  wellData[attr] = data[attr];\n                }\n              }\n            }\n            if ($.isEmptyObject(wellData)) {\n              derivativeJson[idx] = null; \n            } else {\n              derivativeJson[idx] = JSON.stringify(wellData);\n            }\n          }\n\n          while (!$.isEmptyObject(derivativeJson)) {\n            var keys = Object.keys(derivativeJson).map(function (k) {return parseFloat(k, 10);});\n            keys.sort(function (a, b) {return a-b;}); \n\n            var refDerivativeIndex = keys[0];\n            var referenceDerivative = derivativeJson[refDerivativeIndex];\n            var arr = [];\n\n            if (!referenceDerivative) {\n              // if no checked box has value, push it to first spot\n              if (this.stackUpWithColor[0]) {\n                this.stackUpWithColor[0].push(refDerivativeIndex);\n              } else {\n                this.stackUpWithColor[0] = [refDerivativeIndex];\n              }\n\n              delete derivativeJson[refDerivativeIndex];\n            } else {\n              // if checked boxes have values\n              for (var i = 0; i < keys.length; i++) {\n                var idx = keys[i]; \n                if (referenceDerivative == derivativeJson[idx]) {\n                  arr.push(idx);\n                  this.stackUpWithColor[this.stackPointer] = arr;\n                  delete derivativeJson[idx];\n                }\n              }\n              if (arr.length > 0)\n                this.stackPointer++;\n            }\n          }\n        },\n\n        applyColors: function() {\n\n          var wholeNoTiles = 0;\n          var wholePercentage = 0;\n\n          THIS.addBottomTableHeadings();\n\n          for (var i = 0; i < THIS.allTiles.length; i++) {\n            var tile = THIS.allTiles[i];\n            THIS.setTileVisible(tile, false);\n          }\n\n          for (var color = 0; color < this.stackPointer; color++) {\n            var arr = this.stackUpWithColor[color];\n            if (arr) {\n              THIS.addBottomTableRow(color, arr);\n\n              for (var tileIndex in arr) {\n                wholeNoTiles++;\n                var index = this.stackUpWithColor[color][tileIndex]; \n                var tile = THIS.allTiles[index];\n                var well = this.derivative[index];\n                this.colorMap.set(index, color);\n                THIS.setTileColor(tile, color);\n                // Checks if all the required fields are filled\n                var completion = this.checkCompletion(well, tile);\n                THIS.setTileComplete(tile, completion == 1); \n                wholePercentage = wholePercentage + completion;\n              }\n            }\n          }\n\n          wholePercentage = Math.floor(100 * wholePercentage / wholeNoTiles);\n\n          if (isNaN(wholePercentage)) {\n            THIS.overLayTextContainer.text(\"Completion Percentage: 0%\");\n          } else {\n            THIS.overLayTextContainer.text(\"Completion Percentage: \" + wholePercentage + \"%\");\n          }\n        },\n\n        checkCompletion: function(wellData, tile) {\n          var req = 0; \n          var fill = 0;\n          for (var i = 0; i < THIS.fieldList.length; i++) {\n            var field = THIS.fieldList[i];\n            if (field.checkMultiplexCompletion){\n              // also apply color\n              var multiplexStatus = field.checkMultiplexCompletion(wellData[field.id]);\n              if (multiplexStatus.include) {\n                fill += multiplexStatus.completionPct;\n                req++;\n              }\n            } else {\n              if (field.required) {\n                req++;\n                if (wellData[field.id] !== null) {\n                  fill++;\n                }\n              }\n            }\n          }\n          if (req === fill) {\n            return 1; \n          }\n          return fill / req;\n        },\n      }\n    }\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.fabricEvents = function() {\n    // This object contains Menu items and how it works;\n    return {\n      colorToIndex: {},\n      startCoords: {\n        x: 0,\n        y: 0\n      },\n      focalWell: {\n        row: 0,\n        col: 0\n      },\n      selectedAreas: [],\n\n      _clickCoords: function(evt) {\n        //Get XY Coords for a given event. \n        var rect = evt.e.target.getBoundingClientRect();\n        return {\n          x: evt.e.clientX - rect.left,\n          y: evt.e.clientY - rect.top\n        };\n      },\n\n      _fabricEvents: function() {\n        // Set up event handling. \n        var that = this;\n\n        $(that.target).on(\"getPlates\", function(evt, data) {\n          // This method should be compatable to redo/undo.\n          that.getPlates(JSON.parse(data));\n        });\n\n        that.mainFabricCanvas.on(\"mouse:down\", function(evt) {\n          // Start selecting new area\n          that.selecting = true;\n          var coords = that._clickCoords(evt);\n\n          var areas = that.selectedAreas.slice();\n          var focalWell = that.focalWell;\n          var startCoords = that._wellToCoords(focalWell, true);\n          var rect = that._coordsToRect(startCoords, coords);\n\n          if (evt.e.ctrlKey) {\n            //adding new area\n            startCoords = coords;\n            rect = that._coordsToRect(startCoords, coords);\n            focalWell = that._coordsToWell(startCoords);\n            if (evt.e.shiftKey) {\n              //replacing existing areas\n              areas = [that._rectToArea(rect)];\n            } else {\n              areas.push(that._rectToArea(rect));\n            }\n          } else {\n            if (evt.e.shiftKey) {\n              //Altering last area\n              areas[areas.length - 1] = that._rectToArea(rect);\n            } else {\n              //Creating new area\n              startCoords = coords;\n              rect = that._coordsToRect(startCoords, coords);\n              focalWell = that._coordsToWell(startCoords);\n              areas = [that._rectToArea(rect)];\n            }\n          }\n\n          that.startCoords = startCoords;\n          that.setSelection(areas, focalWell);\n          that.mainFabricCanvas.renderAll();\n        });\n\n        that.mainFabricCanvas.on(\"mouse:move\", function(evt) {\n          if (that.selecting) {\n            // continue selecting new area\n            var areas = that.selectedAreas.slice();\n            var endCoords = that._clickCoords(evt);\n            var rect = that._coordsToRect(that.startCoords, endCoords);\n            var area = that._rectToArea(rect);\n            if (area) {\n              areas[areas.length - 1] = area;\n            }\n\n            that.setSelection(areas, that.focalWell);\n            that.mainFabricCanvas.renderAll();\n          }\n\n        });\n\n        that.mainFabricCanvas.on(\"mouse:up\", function(evt) {\n          // finish selecting new area\n          that.selecting = false;\n          var areas = that.selectedAreas.slice();\n          var endCoords = that._clickCoords(evt);\n          var rect = that._coordsToRect(that.startCoords, endCoords);\n          var area = that._rectToArea(rect);\n          if (area) {\n            areas[areas.length - 1] = area;\n          }\n\n          that.setSelection(areas, that.focalWell);\n          that.decideSelectedFields();\n          that.mainFabricCanvas.renderAll();\n          that._trigger(\"selectedWells\", null, {selectedAddress: that.getSelectedAddress()});\n          if(that.options.scrollToGroup === undefined || that.options.scrollToGroup) {\n            that.selectObjectInBottomTab();\n          }\n        });\n      },\n\n      setSelection: function(areas, focalWell) {\n        this.selectedAreas = areas;\n        this.focalWell = focalWell;\n        this.allSelectedObjects = this._areasToTiles(areas);\n        this._setSelectedTiles();\n        this._setFocalWellRect(this.focalWell);\n        document.activeElement.blur();\n      },\n\n      _setFocalWellRect: function(well) {\n        var flag;\n        // check if not allow to add or delete existing wells\n        if (this.disableAddDeleteWell) {\n          var address = this.locToAddress({\n            r: well.row,\n            c: well.col\n          });\n          if  (this.addressAllowToEdit.indexOf(address) < 0) {\n            flag = false;\n            this.setFieldsDisabled(true);\n          } else {\n            flag = true;\n            this.setFieldsDisabled(false);\n          }\n        } else if (well) {\n          flag = true;\n        }\n\n        if (flag) {\n          var rect = this._areaToRect(this._wellToArea(well));\n          var strokeWidth = 2;\n          if (this.focalWellRect) {\n            //update focalWellRect\n            this.focalWellRect.top = rect.top;\n            this.focalWellRect.left = rect.left;\n            this.focalWellRect.width = rect.width - strokeWidth;\n            this.focalWellRect.height = rect.height - strokeWidth;\n          } else {\n            //create focalWellRect\n            this.focalWellRect = new fabric.Rect({\n              width: rect.width - strokeWidth,\n              height: rect.height - strokeWidth,\n              left: rect.left,\n              top: rect.top,\n              fill: null,\n              strokeWidth: strokeWidth,\n              stroke: \"black\",\n              selectable: false\n            });\n            this.mainFabricCanvas.add(this.focalWellRect);\n          }\n        } else {\n          //clear focalWellRect\n          this.mainFabricCanvas.remove(this.focalWellRect);\n          this.focalWellRect = null;\n        }\n      },\n\n      _setSelectedTiles: function() {\n        // Update selected tile display only\n        var selectedTiles = this.allSelectedObjects;\n        this.allTiles.forEach(function(tile) {\n          var selected = selectedTiles.indexOf(tile) >= 0;\n          tile.highlight.visible = selected;\n        })\n      },\n\n      _getSelectedWells: function () {\n        var that = this; \n        return this.allSelectedObjects.map(function (tile) {\n          var well = that.engine.derivative[tile.index];\n          if (!well) {\n            well = that.defaultWell; \n          }\n          return well; \n        }); \n      },\n\n      _getCommonFields: function (wells) {\n        if (wells.length) {\n          var referenceWell = wells[0];\n          var referenceFields = $.extend(true, {}, referenceWell);\n          for (var i = 1; i < wells.length; i++) {\n            var fields = wells[i];\n            for (var field in referenceFields) {\n              if (Array.isArray(referenceFields[field])) {\n                var refArr = referenceFields[field]; \n                var agrArr = []; \n                for (var j = 0; j < refArr.length; j++) {\n                  var v = refArr[j];\n                  if (v && typeof(v) === \"object\") {\n                    if (this.containsObject(v, fields[field])) {\n                      agrArr.push(v);\n                    }\n                  } else {\n                    if ($.inArray(v, fields[field]) >= 0) {\n                      agrArr.push(v);\n                    }\n                  }\n                }\n                referenceFields[field] = agrArr; \n              } else {\n                if (fields[field] && typeof(fields[field]) ===\"object\" && referenceFields[field] && typeof(referenceFields[field]) ===\"object\"){\n                  if ((fields[field].value !== referenceFields[field].value) || (fields[field].unit !== referenceFields[field].unit)){\n                    delete referenceFields[field];\n                  }\n                } else if (referenceFields[field] != fields[field]) {\n                  delete referenceFields[field];\n                }\n              }\n            }\n          }\n          return referenceFields\n        } else {\n          return {};\n        }\n      },\n\n      containsObject: function(obj, list) {\n        var equality = [];\n        if (list) {\n          list.forEach(function(val) {\n            //evaluate val and obj\n            var evaluate = [];\n            Object.keys(val).forEach(function(listKey){\n              if (Object.keys(obj).indexOf(listKey) >= 0){\n                var curVal = val[listKey];\n                if (typeof(curVal) === 'object' && curVal) {\n                  if (obj[listKey]){\n                    evaluate.push((curVal.unit === obj[listKey].unit) && (curVal.value === obj[listKey].value));\n                  } else {\n                    // when obj[listKey] is null but curVal is not\n                    evaluate.push(false);\n                  }\n                } else {\n                  evaluate.push(curVal === obj[listKey]);\n                }\n              }\n            });\n            equality.push(evaluate.indexOf(false) < 0);\n          });\n          return equality.indexOf(true) >= 0;\n        } else {\n          return false;\n        }\n      },\n\n      _getCommonWell: function (wells) {\n        if (wells.length) {\n          var referenceWell = wells[0];\n          var referenceFields = $.extend(true, {}, referenceWell);\n          for (var i = 1; i < wells.length; i++) {\n            var well = wells[i];\n            var fields = well;\n            for (var field in referenceFields) {\n              if (Array.isArray(referenceFields[field])) {\n                var refArr = referenceFields[field]; \n                var agrArr = []; \n                for (var j = 0; j < refArr.length; j++) {\n                  var v = refArr[j];\n                  // for multiplex field\n                  if (typeof(refArr[j]) ===\"object\"){\n                    if (this.containsObject(v, fields[field])) {\n                      agrArr.push(v);\n                    }\n                  } else {\n                    if ($.inArray(v, fields[field]) >= 0) {\n                      agrArr.push(v);\n                    }\n                  }\n                }\n                referenceFields[field] = agrArr; \n              } else {\n                if (fields[field] && typeof(fields[field]) ===\"object\" && referenceFields[field] && typeof(referenceFields[field]) ===\"object\"){\n                  if ((fields[field].value !== referenceFields[field].value) || (fields[field].unit !== referenceFields[field].unit)){\n                    referenceFields[field] = null;\n                  }\n                } else if (referenceFields[field] != fields[field]) {\n                  referenceFields[field] = null;\n                }\n\n              }\n            }\n          }\n          return referenceFields;\n        } else {\n          return this.defaultWell; \n        }\n      }, \n\n      _getAllMultipleVal: function (wells) {\n        var multipleFieldList = this.multipleFieldList;\n\n        multipleFieldList.forEach(function(multiplexField) {\n          if(wells.length) {\n            var curMultipleVal = {};\n            wells.forEach(function (wellData) {\n              var id = multiplexField.id;\n              if (wellData[id]){\n                if (wellData[id].length > 0) {\n                  wellData[id].forEach(function (multipleVal) {\n                    if (typeof(multipleVal) === 'object') {\n                      if (multipleVal[id] in curMultipleVal) {\n                        curMultipleVal[multipleVal[id]] ++;\n                      } else {\n                        curMultipleVal[multipleVal[id]] = 1;\n                      }\n                    } else {\n                      if (multipleVal in curMultipleVal) {\n                        curMultipleVal[multipleVal] ++;\n\n                      } else {\n                        curMultipleVal[multipleVal] = 1;\n                      }\n                    }\n                  })\n                }\n              }\n            });\n            multiplexField.allSelectedMultipleVal = curMultipleVal;\n          } else {\n            multiplexField.allSelectedMultipleVal = null\n          }\n        });\n      },\n\n      decideSelectedFields: function() {\n        var wells = this._getSelectedWells();\n        this._getAllMultipleVal(wells);\n        this.applyFieldWarning(wells);\n        var well = this._getCommonWell(wells); \n        this._addDataToTabFields(well);\n      },\n\n      // get well value differences for each well in wellsHash\n      getDifferentWellsVals: function(wellsHash) {\n        var wells = [];\n        for (var wellId in wellsHash){\n          wells.push(wellsHash[wellId]);\n        }\n        var differentWellsVals = {};\n        if (wells.length > 1){\n          var commonWell = this._getCommonWell(wells);\n          var allFieldVal = {};\n          for (var fieldIdx in wellsHash[0]) {\n            allFieldVal[fieldIdx] = [];\n          }\n          for (var wellIdx in wells){\n            var diffWellVal = {};\n            var curWellData = wells[wellIdx];\n            for (var fieldId in curWellData) {\n              var commonVal = commonWell[fieldId];\n              var curVal = curWellData[fieldId];\n              var newVal = null;\n              if (Array.isArray(curVal)) {\n                // get uncommonVal\n                newVal = [];\n                for (var idx = 0; idx < curVal.length; idx ++){\n                  var curMultiVal = curVal[idx];\n                  // multiplex field\n                  if (curMultiVal && typeof(curMultiVal === \"object\")){\n                    if (!this.containsObject(curMultiVal, commonVal)) {\n                      newVal.push(curMultiVal);\n                      if (!this.containsObject(curMultiVal, allFieldVal[fieldId])) {\n                        allFieldVal[fieldId].push(curMultiVal);\n                      }\n                    }\n                  } else {\n                    if (commonVal.indexOf(curMultiVal) >= 0) {\n                      newVal.push(curMultiVal);\n                      if (!allFieldVal[fieldId].indexOf(curMultiVal) >= 0) {\n                        allFieldVal[fieldId].push(curMultiVal);\n                      }\n                    }\n                  }\n                }\n              } else if (curVal && typeof(curVal) === \"object\"){\n                if (commonVal && typeof(commonVal) ===\"object\"){\n                  if (!((curVal.value === commonVal.value) || (curVal.unit === commonVal.unit))){\n                    newVal = curVal;\n                    if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                      allFieldVal[fieldId].push(curVal);\n                    }\n                  }\n                } else {\n                  newVal = curVal;\n                  if (!this.containsObject(curVal, allFieldVal[fieldId])) {\n                    allFieldVal[fieldId].push(curVal);\n                  }\n                }\n              } else if (curVal !== commonVal) {\n                newVal = curVal;\n                if (!allFieldVal[fieldId].indexOf(curVal) >= 0) {\n                  allFieldVal[fieldId].push(curVal);\n                }\n              }\n              diffWellVal[fieldId] = newVal;\n            }\n\n\n            differentWellsVals[wellIdx] = diffWellVal;\n          }\n\n          // clean up step for fields that are empty\n          for (var fieldId in allFieldVal) {\n            if (allFieldVal[fieldId].length === 0) {\n              for (var wellIdx in differentWellsVals){\n                delete differentWellsVals[wellIdx][fieldId];\n              }\n            }\n          }\n\n          return differentWellsVals;\n        } else if (wellsHash[0]) {\n          var well = {};\n          for (var fieldId in wellsHash[0]) {\n            var curVal = wellsHash[0][fieldId];\n            if (Array.isArray(curVal)){\n              if (curVal.length > 0) {\n                well[fieldId] = curVal\n              }\n            } else if (curVal){\n              well[fieldId] = curVal;\n            }\n          }\n          return {\n            0: well\n          };\n        }\n      },\n\n      // get all wells that has data\n      getWellSetAddressWithData: function(){\n        var address = [];\n        var derivative = this.engine.derivative;\n        for (var id in derivative){\n          address.push(this.indexToAddress(id));\n        }\n        return address;\n      }\n\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\nplateLayOutWidget.assets = function () {\n    return {\n        _assets: {\n            doImg: '&#10003;',\n            dontImg: '',\n            warningImg: '&#9888;'\n        }\n    };\n};\n","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function ($, fabric) {\n\n    plateLayOutWidget.interface = function () {\n        // interface holds all the methods to put the interface in place\n        return {\n\n            _createWellsContainer: function () {\n                var divIdentifier = '<div></div>';\n                this.wellsContainer = this.element.find('#wells-container');\n                this.wellsContainer.addClass(\"plate-setup-wells-container\");\n                this.overLayContainer = this._createElement(divIdentifier).addClass(\"plate-setup-overlay-container\");\n                this.canvasContainer = this._createElement(divIdentifier).addClass(\"plate-setup-canvas-container\");\n                this._createOverLay();\n                $(this.wellsContainer).append(this.overLayContainer);\n                this._createCanvas();\n                $(this.wellsContainer).append(this.canvasContainer);\n                this._initiateFabricCanvas();\n                // Canvas\n                this._canvas();\n                var that = this;\n                this._setShortcuts();\n                $(document.body).keyup(function (e) {\n                    that._handleShortcuts(e);\n                });\n                this._configureUndoRedoArray();\n            },\n\n            _createTabsContainer: function () {\n                this.tabsContainer = this.element.find('#tabs-container');\n                // NB: the #tabs-container element may not exist in the DOM, but '.addClass()' below will not raise any error !\n                this.tabsContainer.addClass(\"plate-setup-tabs-container\");\n                this._createTabAtRight();\n                this._createTabs();\n                this._placePresetTabs();\n            },\n\n            _createGroupsContainer: function () {\n                this.bottomContainer = this.element.find('#groups-container');\n                this.bottomContainer.addClass(\"plate-setup-groups-container\");\n                this._bottomScreen();\n                this.bottomForFirstTime();\n            },\n\n            _createElement: function (element) {\n                return $(element);\n            },\n\n            _setShortcuts: function () {\n                var that = this;\n                window.addEventListener(\"cut\", function (e) {\n                    if (document.activeElement == document.body) {\n                        that.copyCriteria();\n                        that.clearCriteria();\n                        e.preventDefault();\n                    }\n                });\n                window.addEventListener(\"copy\", function (e) {\n                    if (document.activeElement == document.body) {\n                        that.copyCriteria();\n                        e.preventDefault();\n                    }\n                });\n                window.addEventListener(\"paste\", function (e) {\n                    if (document.activeElement == document.body) {\n                        that.pasteCriteria();\n                        e.preventDefault();\n                    }\n                });\n            },\n\n            _handleShortcuts: function (e) {\n                if (document.activeElement === document.body) {\n                    if (e.keyCode == 46) {\n                        this.clearCriteria();\n                        e.preventDefault();\n                    } else if (e.ctrlKey || e.metaKey) {\n                        if (e.keyCode == 90) {\n                            if (e.shiftKey) {\n                                this.redo();\n                            } else {\n                                this.undo();\n                            }\n                            e.preventDefault();\n                        } else if (e.keyCode == 89) {\n                            this.redo();\n                            e.preventDefault();\n                        }\n                    }\n                }\n            },\n        };\n    }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.loadPlate = function(THIS) {\n    // Methods which look after data changes and stack up accordingly\n    // Remember THIS points to plateLayOutWidget and 'this' points to engine\n    return {\n\n      getPlates: function (data) {\n        //sanitize input\n        var derivative = {}; \n        for (var index in data.derivative) {\n          var well = data.derivative[index]; \n          derivative[index] = this.sanitizeWell(well); \n        }\n\n        var checkboxes = data.checkboxes || []; \n        var selection = this.sanitizeAreas(data.selectedAreas, data.focalWell); \n\n        var sanitized = {\n          \"derivative\": derivative,\n          \"checkboxes\": checkboxes,\n          \"selectedAreas\": selection.selectedAreas,\n          \"focalWell\": selection.focalWell\n        }; \n\n        this.setData(sanitized);\n      }, \n\n      sanitizeAreas: function (selectedAreas, focalWell) {\n        var that = this; \n        var rows = this.dimensions.rows;\n        var cols = this.dimensions.cols;\n\n        if (!selectedAreas) {\n          selectedAreas = [];\n        }\n        if (selectedAreas.length) {\n          selectedAreas = selectedAreas.map(function (area) {\n            return {\n              minCol: that._coordIndex(Math.min(area.minCol, area.maxCol), cols), \n              minRow: that._coordIndex(Math.min(area.minRow, area.maxRow), rows), \n              maxCol: that._coordIndex(Math.max(area.minCol, area.maxCol), cols), \n              maxRow: that._coordIndex(Math.max(area.minRow, area.maxRow), rows)\n            }; \n          }); \n          var area = selectedAreas[selectedAreas.length - 1];\n          if (focalWell && !this._wellInArea(focalWell, area)) {\n            focalWell = null;\n          }\n          if (!focalWell) {\n            focalWell = {\n              row: area.minRow,\n              col: area.minCol\n            };\n          }\n        } else {\n          if (!focalWell) {\n            focalWell = {\n              row: 0,\n              col: 0\n            };\n          }\n          selectedAreas = [this._wellToArea(focalWell)];\n        }\n        return {\n          selectedAreas: selectedAreas, \n          focalWell: focalWell\n        };\n      }, \n\n      sanitizeWell: function (well) {\n        var newWell = {};\n        for (var i = 0; i < this.fieldList.length; i++) {\n          var field = this.fieldList[i];\n          newWell[field.id] = field.parseValue(well[field.id]);\n        }\n        return newWell; \n      }, \n\n      setData: function(data) {\n        this.engine.derivative = $.extend(true, {}, data.derivative);\n        this.setCheckboxes(data.checkboxes);\n        this.setSelection(data.selectedAreas, data.focalWell);\n        this._colorMixer();\n        this.decideSelectedFields();\n        this.mainFabricCanvas.renderAll();\n      },\n\n    }\n  }\n})(jQuery, fabric);","var GET_PLATES = 'getPlates';\nvar IS_READ_ONLY = 'isReadOnly';\nvar IS_DISABLE_ADD_DELETE_WELL = 'isDisableAddDeleteWell';\nvar GET_SELECTED_OBJECT = 'getSelectedObject';\nvar SETSELECTEDWELL = 'setSelectedWell';","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.overlay = function() {\n    // overlay holds all the methods to put the part just above the canvas which contains all those\n    // 'completion percentage' annd 'copy Criteria' button etc ...\n    return {\n\n      _createOverLay: function() {\n\n        var that = this;\n        this.overLayTextContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-text-container\");\n        this.overLayTextContainer.text(\"Completion Percentage:\");\n        this.overLayContainer.append(this.overLayTextContainer);\n        this.overLayButtonContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-overlay-button-container\");\n        this.overLayContainer.append(this.overLayButtonContainer);\n\n        this.clearCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.clearCriteriaButton.text(\"Clear\");\n        this.overLayButtonContainer.append(this.clearCriteriaButton);\n\n        this.clearCriteriaButton.click(function(evt) {\n          that.clearCriteria();\n        });\n\n        this.copyCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.copyCriteriaButton.text(\"Copy\");\n        this.overLayButtonContainer.append(this.copyCriteriaButton);\n\n        this.copyCriteriaButton.click(function(evt) {\n          that.copyCriteria();\n        });\n\n        this.pasteCriteriaButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.pasteCriteriaButton.text(\"Paste\");\n        this.overLayButtonContainer.append(this.pasteCriteriaButton);\n\n        this.pasteCriteriaButton.click(function(evt) {\n          that.pasteCriteria();\n        });\n\n        this.undoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.undoButton.text(\"Undo\");\n        this.overLayButtonContainer.append(this.undoButton);\n\n        this.undoButton.click(function(evt) {\n          that.undo();\n        });\n\n        this.redoButton = this._createElement(\"<button />\").addClass(\"plate-setup-button\");\n        this.redoButton.text(\"Redo\");\n        this.overLayButtonContainer.append(this.redoButton);\n\n        this.redoButton.click(function(evt) {\n          that.redo();\n        });\n\n      },\n\n      clearCriteria: function() {\n        if (this.allSelectedObjects) {\n          var noOfSelectedObjects = this.allSelectedObjects.length;\n          var hasWellUpdate = false;\n          for (var objectIndex = 0; objectIndex < noOfSelectedObjects; objectIndex++) {\n            var tile = this.allSelectedObjects[objectIndex];\n            if (tile.index in this.engine.derivative) {\n              // handling for clearing well when not allowed to add or delete wells\n              if (this.emptyWellWithDefaultVal && this.disableAddDeleteWell) {\n                var well = JSON.parse(JSON.stringify(this.defaultWell));\n                var defaultValue = this.emptyWellWithDefaultVal;\n                for (var key in defaultValue){\n                  if (key in well) {\n                    well[key] = defaultValue[key];\n                    this._applyFieldData(key, defaultValue[key]);\n                  } else {\n                    console.log(\"Well does not contain key: \" + key + \", please contact support\");\n                  }\n                }\n                this.engine.derivative[tile.index] = well;\n              } else {\n                delete this.engine.derivative[tile.index];\n              }\n              hasWellUpdate = true;\n            }\n          }\n          if (hasWellUpdate){\n            this.derivativeChange();\n          }\n\n          this._colorMixer();\n          this.decideSelectedFields();\n        } else {\n          alert(\"Please select any well\");\n        }\n      },\n\n      copyCriteria: function() {\n        if (this.allSelectedObjects) {\n          var wells = this._getSelectedWells(); \n          this.commonWell = this._getCommonFields(wells); \n        } else {\n          alert(\"Please select any well.\");\n        }\n      },\n\n      pasteCriteria: function() {\n        if (this.commonWell) {\n          this._addAllData(this.commonWell);\n          this.decideSelectedFields();\n          this.mainFabricCanvas.renderAll();\n        }\n      }\n    };\n  }\n})(jQuery, fabric);","$.widget(\"DNA.plateLayOut\", {\n\n    plateLayOutWidget: {},\n\n    options: {\n        value: 0\n    },\n\n    allTiles: [], // All tiles containes all thise circles in the canvas\n\n    addressToLoc: function (layoutAddress) {\n        var m = /^([A-Z]+)(\\d+)$/.exec(layoutAddress.trim().toUpperCase())\n        if (m) {\n            var row_v = m[1];\n            var col = parseInt(m[2]) - 1;\n            var row;\n            for (var i = 0; i < row_v.length; i++) {\n                var c = row_v.charCodeAt(i) - 65;\n                if (i) {\n                    row += 1;\n                    row *= 26;\n                    row += c;\n                } else {\n                    row = c;\n                }\n            }\n            return {\n                r: row,\n                c: col\n            };\n        } else {\n            throw layoutAddress + \" not a proper layout address\";\n        }\n    },\n\n    locToIndex: function (loc, dimensions) {\n        if (!dimensions) {\n            dimensions = this.dimensions;\n        }\n        if (loc.r < 0) {\n            t\n        }\n        if (!(loc.r >= 0 && loc.r < dimensions.rows)) {\n            throw \"Row index \" + (loc.r + 1) + \" invalid\";\n        }\n        if (!(loc.c >= 0 && loc.c < dimensions.cols)) {\n            throw \"Column index \" + (loc.c + 1) + \" invalid\";\n        }\n        return loc.r * dimensions.cols + loc.c;\n    },\n\n    addressToIndex: function (layoutAddress, dimensions) {\n        var loc = this.addressToLoc(layoutAddress);\n        return this.locToIndex(loc, dimensions);\n    },\n\n    _rowKey: function (i) {\n        var c1 = i % 26;\n        var c2 = (i - c1) / 26;\n        var code = String.fromCharCode(65 + c1);\n        if (c2 > 0) {\n            code = String.fromCharCode(64 + c2) + code;\n        }\n        return code;\n    },\n\n    indexToLoc: function (index, dimensions) {\n        if (!dimensions) {\n            dimensions = this.dimensions;\n        }\n\n        if (index >= dimensions.rows * dimensions.cols) {\n            throw \"Index too high: \" + index.toString(10);\n        }\n        var loc = {};\n        loc.c = index % dimensions.cols;\n        loc.r = (index - loc.c) / dimensions.cols;\n\n        return loc;\n    },\n\n    locToAddress: function (loc) {\n        return this._rowKey(loc.r) + (loc.c + 1).toString(10);\n    },\n\n    indexToAddress: function (index, dimensions) {\n        var loc = this.indexToLoc(index, dimensions);\n        return this.locToAddress(loc);\n    },\n\n    getDimensions: function () {\n        return $.extend(true, {}, this.dimensions);\n    },\n\n    _create: function () {\n        var rows = parseInt(this.options.numRows || 8);\n        var cols = parseInt(this.options.numCols || 12);\n        this.dimensions = {\n            rows: rows,\n            cols: cols\n        };\n        this.rowIndex = [];\n        for (var i = 0; i < rows; i++) {\n            this.rowIndex.push(this._rowKey(i));\n        }\n\n        this.target = (this.element[0].id) ? \"#\" + this.element[0].id : \".\" + this.element[0].className;\n\n        // Import classes from other files.. Here we import it using extend and add it to this\n        // object. internally we add to widget.DNA.getPlates.prototype.\n        // Helpers are methods which return other methods and objects.\n        // add Objects to plateLayOutWidget and it will be added to this object.\n        // set read only well\n        if (this.options.readOnly) {\n            this.isReadOnly(true);\n        }\n\n        for (var component in plateLayOutWidget) {\n            // Incase some properties has to initialize with data from options hash,\n            // we provide it sending this object.\n            $.extend(this, new plateLayOutWidget[component](this));\n        }\n\n        this.imgSrc = this.options.imgSrc || \"assets\";\n\n        this._createWellsContainer();\n        this._createTabsContainer();\n        this._createGroupsContainer();\n\n        this._trigger(\"created\", null, this);\n\n        return this;\n    },\n\n    _init: function () {\n        // This is invoked when the user use the plugin after _create is called.\n        // The point is _create is invoked for the very first time and for all other\n        // times _init is used.\n    },\n\n    addData: function () {\n        alert(\"wow this is good\");\n    },\n\n    // wellsData follows syntax: {0:{field1: val1, field2: val2}, 1:{field1: val1, field2: val2}}\n    getTextDerivative: function (wellsData) {\n        var textDerivative = {};\n        var fieldMap = this.fieldMap;\n        for (var idx in wellsData) {\n            var textValWell = {};\n            var textFieldIdWell = {};\n            var curWellData = wellsData[idx];\n            for (var fieldId in curWellData) {\n                if (fieldId in this.fieldMap) {\n                    var field = this.fieldMap[fieldId];\n                    var textVal = field.parseText(curWellData[fieldId]);\n                    textFieldIdWell[field.name] = textVal;\n                    textValWell[fieldId] = textVal;\n                } else {\n                    // do not convert if not a field (ex: layout_address)\n                    textFieldIdWell[fieldId] = curWellData[fieldId];\n                    textValWell[fieldId] = curWellData[fieldId];\n                }\n            }\n            textDerivative[idx] = {\n                textVal: textValWell,\n                textFieldVal: textFieldIdWell\n            };\n        }\n\n        return textDerivative;\n    },\n\n    // wellsData follows syntax: {0:{field1: val1, field2: val2}, 1:{field1: val1, field2: val2}}\n    getWellsDifferences: function (wellsData) {\n        return this.getDifferentWellsVals(wellsData);\n    },\n\n    setFieldsDisabled: function (flag) {\n        this.fieldList.forEach(function (field) {\n            field.disabled(flag);\n        });\n    },\n\n    isReadOnly: function (flag) {\n        if (flag) {\n            this.readOnly = true;\n        } else {\n            this.readOnly = false;\n        }\n        this.readOnlyHandler();\n    },\n\n    readOnlyHandler: function () {\n        if (this.readOnly) {\n            this.overLayButtonContainer.css(\"display\", \"none\");\n            $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n            this.setFieldsDisabled(true);\n        } else {\n            this.overLayButtonContainer.css(\"display\", \"flex\");\n            $('.multiple-field-manage-delete-button').css(\"display\", \"none\");\n            if (!this.disableAddDeleteWell) {\n                this.setFieldsDisabled(false);\n            }\n        }\n    },\n\n    disableAddDeleteWell: null,\n    // column_with_default_val will be used to determine empty wells, format: {field_name: default_val}\n    isDisableAddDeleteWell: function (flag, column_with_default_val) {\n        if (flag) {\n            this.disableAddDeleteWell = true;\n            this.addressAllowToEdit = this.getWellSetAddressWithData();\n            // configure undo redo action\n            this.actionPointer = 0;\n            this.undoRedoArray = [];\n            this.undoRedoArray.push(this.createObject());\n            if (column_with_default_val) {\n                this.emptyWellWithDefaultVal = column_with_default_val;\n            }\n        } else {\n            this.disableAddDeleteWell = false;\n            this.setFieldsDisabled(false);\n            this.emptyWellWithDefaultVal = null;\n        }\n        this._fabricEvents();\n    },\n\n    getSelectedObject: function () {\n        var selectedAddress = [];\n        for (var i = 0; i < this.allSelectedObjects.length; i++) {\n            selectedAddress.push(this.allSelectedObjects[i].address);\n        }\n        var selectedObjects = {};\n        var derivative = this.engine.derivative;\n        for (var index in derivative) {\n            var address = this.indexToAddress(index);\n            if (selectedAddress.indexOf(address) >= 0) {\n                var well = JSON.parse(JSON.stringify(derivative[index]));\n                well.colorIndex = this.engine.colorMap.get(Number(index));\n                selectedObjects[address] = well;\n            }\n        }\n        return selectedObjects;\n    },\n\n    selectObjectInBottomTab: function () {\n        var selectedObjects = this.getSelectedObject();\n        var selectedObjectAddress;\n        for (var prop in selectedObjects) {\n            if (!selectedObjectAddress) {\n                selectedObjectAddress = prop;\n            } else {\n                return;  // scroll to matching group only if a single well has been selected\n            }\n        }\n        if (selectedObjects[selectedObjectAddress]) {\n            var colorIndex = selectedObjects[selectedObjectAddress].colorIndex;\n            var trs = document.querySelectorAll('table.plate-setup-bottom-table tr');\n            for (var i = 1; i < trs.length; i++) { // start at 1 to skip the table headers\n                var tds = trs[i].children;\n                var isSelected = tds[0].querySelector('button').innerHTML === colorIndex.toString();\n                for (var j = 1; j < tds.length; j++) {\n                    if (isSelected) {\n                        tds[j].style.background = '#22cb94';\n                    } else {\n                        tds[j].style.background = '#ffffff';\n                    }\n                }\n                if (isSelected) {\n                    scrollTo(document.querySelector('.plate-setup-bottom-table-container'), tds[0].offsetTop, 300);\n                }\n            }\n        }\n    },\n\n    getSelectedIndex: function () {\n        return this.allSelectedObjects.map(function (selectedObj) {\n            return that.addressToIndex(selectedObj.address)\n        });\n    },\n\n    getSelectedAddress: function () {\n        return this.allSelectedObjects.map(function (selectedObj) {\n            return selectedObj.address;\n        });\n    },\n\n    setSelectedWell: function (addressList) {\n        var areas = [];\n        var minRow = 999;\n        var locMap = {};\n        for (var id = 0; id < addressList.length; id++) {\n            var wellIdx = this.addressToIndex(addressList[id]);\n            var loc = this.indexToLoc(wellIdx);\n            areas.push({\n                minCol: loc.c,\n                minRow: loc.r,\n                maxCol: loc.c,\n                maxRow: loc.r\n            });\n            if (loc.r <= minRow) {\n                minRow = loc.r;\n                if (loc.r in locMap) {\n                    locMap[loc.r].push(loc.c);\n                } else {\n                    locMap[loc.r] = [loc.c];\n                }\n            }\n        }\n        var focalWell = {\n            row: minRow,\n            col: Math.min.apply(null, locMap[minRow])\n        };\n\n        this.setSelection(areas, focalWell);\n        this.decideSelectedFields();\n        this.mainFabricCanvas.renderAll();\n    }\n\n});\n\n// https://stackoverflow.com/questions/17733076/smooth-scroll-anchor-links-without-jquery\nfunction scrollTo(element, to, duration) {\n    if (duration <= 0) return;\n    var difference = to - element.scrollTop;\n    var perTick = difference / duration * 10;\n    setTimeout(function () {\n        element.scrollTop = element.scrollTop + perTick;\n        if (element.scrollTop === to) return;\n        scrollTo(element, to, duration - 10);\n    }, 10);\n}","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.preset = function(me) {\n    // All the preset action goes here\n    return {\n\n      presets: [],\n\n      _placePresetTabs: function() {\n        var presets = this.options.attributes.presets;\n\n        if (presets && presets.length) {\n          this.wellAttrContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-well-attr-container\")\n            .text(\"Checkbox presets\");\n          this.tabContainer.append(this.wellAttrContainer);\n\n          this.presetTabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-preset-container\");\n          this.tabContainer.append(this.presetTabContainer);\n\n          for (var i = 0; i < presets.length; i++) {\n            var preset = presets[i];\n            var divText = this._createElement(\"<div></div>\").addClass(\"plate-setup-prest-tab-div\")\n              .text(preset.title);\n\n            var presetButton = this._createElement(\"<div></div>\").addClass(\"plate-setup-prest-tab\")\n              .data(\"preset\", preset.fields).append(divText);\n            this.presetTabContainer.append(presetButton);\n\n            var that = this;\n            presetButton.click(function() {\n              var preset = $(this);\n              that._selectPreset(preset);\n            });\n            this.presets.push(presetButton);\n          }\n        }\n      },\n\n      _clearPresetSelection: function() {\n        for (var j = 0; j < this.presets.length; j++) {\n          var p = this.presets[j]; \n          p.removeClass(\"plate-setup-prest-tab-selected\")\n            .addClass(\"plate-setup-prest-tab\"); \n        }\n      },\n\n      _selectPreset: function (preset) {\n        this.setCheckboxes(preset.data(\"preset\")); \n        preset.removeClass(\"plate-setup-prest-tab\")\n          .addClass(\"plate-setup-prest-tab-selected\");\n      },\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.tabs = function() {\n    // Tabs crete and manage tabs at the right side of the canvas.\n    return {\n\n      allTabs: [],\n\n      defaultWell: {},\n\n      allDataTabs: [], // To hold all the tab contents. this contains all the tabs and its elements and elements\n      // Settings as a whole. its very usefull, when we have units for a specific field.\n      // it goes like tabs-> individual field-> units and checkbox\n\n      _createTabAtRight: function() {\n        this.tabContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-container\");\n        $(this.tabsContainer).append(this.tabContainer);\n      },\n\n      _createTabs: function() {\n        // this could be done using z-index. just imagine few cards stacked up.\n        // Check if options has tab data.\n        // Originally we will be pulling tab data from developer.\n        // Now we are building upon dummy data.\n        this.tabHead = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-head\");\n        $(this.tabContainer).append(this.tabHead);\n\n        var tabData = this.options.attributes.tabs;\n        var that = this;\n\n        tabData.forEach(function (tab, tabIndex) {\n          that.allTabs[tabIndex] = that._createElement(\"<div></div>\").addClass(\"plate-setup-tab\");\n          $(that.allTabs[tabIndex]).data(\"index\", tabIndex)\n            .text(tab.name);\n\n          $(that.allTabs[tabIndex]).click(function() {\n            that._tabClickHandler(this);\n          });\n\n          $(that.tabHead).append(that.allTabs[tabIndex]);\n        }); \n\n        this.tabDataContainer = this._createElement(\"<div></div>\").addClass(\"plate-setup-tab-data-container\");\n        $(this.tabContainer).append(this.tabDataContainer);\n\n        this._addDataTabs(tabData);\n\n        $(this.allTabs[0]).click();\n\n        this._addTabData();\n      },\n\n      _tabClickHandler: function(clickedTab) {\n\n        if (this.selectedTab) {\n          $(this.selectedTab).removeClass(\"plate-setup-tab-selected\")\n            .addClass(\"plate-setup-tab\");\n\n          var previouslyClickedTabIndex = $(this.selectedTab).data(\"index\");\n          $(this.allDataTabs[previouslyClickedTabIndex]).css(\"z-index\", 0);\n          this.readOnlyHandler();\n        }\n\n        $(clickedTab).addClass(\"plate-setup-tab-selected\");\n\n        this.selectedTab = clickedTab;\n\n        var clickedTabIndex = $(clickedTab).data(\"index\");\n        $(this.allDataTabs[clickedTabIndex]).css(\"z-index\", 1000);\n      },\n\n      _addDataTabs: function(tabs) {\n\n        var tabIndex = 0;\n\n        for (var tabData in tabs) {\n          this.allDataTabs[tabIndex++] = this._createElement(\"<div></div>\").addClass(\"plate-setup-data-div\")\n            .css(\"z-index\", 0);\n          $(this.tabDataContainer).append(this.allDataTabs[tabIndex - 1]);\n        }\n      }\n    };\n  }\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.undoRedoManager = function(THIS) {\n\n    return {\n\n      undoRedoArray: [],\n\n      actionPointer: null,\n\n      addToUndoRedo: function(data) {\n\n        if (this.actionPointer != null) {\n          var i = this.actionPointer + 1; \n          if (i < this.undoRedoArray.length) {\n            this.undoRedoArray.splice(i, this.undoRedoArray.length - i);\n          }\n        }\n        this.actionPointer = null;\n        this.undoRedoArray.push($.extend(true, {}, data));\n      },\n\n      _configureUndoRedoArray: function() {\n\n        var data = {\n          checkboxes: [],\n          derivative: {},\n          selectedAreas: [{\n            minRow: 0,\n            minCol: 0,\n            maxRow: 0,\n            maxCol: 0\n          }],\n          focalWell: {\n            row: 0,\n            col: 0\n          }\n        };\n\n        this.undoRedoArray = []; \n        this.actionPointer = null; \n        this.undoRedoArray.push($.extend({}, data));\n      },\n\n      undo: function() {\n        console.log(\"undo\");\n        return this.shiftUndoRedo(-1); \n      },\n\n      redo: function() {\n        console.log(\"redo\");\n        return this.shiftUndoRedo(1); \n      }, \n\n      shiftUndoRedo: function (pointerDiff) {\n        var pointer = this.actionPointer;\n        if (pointer == null) {\n          pointer = this.undoRedoArray.length - 1; \n        }\n        pointer += pointerDiff; \n        return this.setUndoRedo(pointer); \n      }, \n\n      setUndoRedo: function (pointer) {\n        if (pointer < 0) {\n          return false; \n        }\n        if (pointer >= this.undoRedoArray.length) {\n          return false; \n        }\n        this.undoRedoActive = true; \n        this.setData(this.undoRedoArray[pointer]);\n        this.actionPointer = pointer; \n        this.undoRedoActive = false;\n        this.derivativeChange();\n        return true;\n      }\n    }\n  };\n\n})(jQuery, fabric);","var plateLayOutWidget = plateLayOutWidget || {};\n\n(function($, fabric) {\n\n  plateLayOutWidget.wellArea = function(fabric) {\n\n    return {\n\n      _areasToTiles: function(areas) {\n        //Convert areas to tiles\n        var cols = this.dimensions.cols;\n        var that = this;\n        return areas.reduce(function(tiles, area) {\n          if (area) {\n            for (var r = area.minRow; r <= area.maxRow; r++) {\n              for (var c = area.minCol; c <= area.maxCol; c++) {\n                var tile = that.allTiles[c + cols * r];\n                if (tiles.indexOf(tile) < 0) {\n                  if (that.disableAddDeleteWell){\n                    if(that.addressAllowToEdit.indexOf(tile.address) >= 0){\n                      tiles.push(tile);\n                    }\n                  } else {\n                    tiles.push(tile);\n                  }\n                }\n              }\n            }\n          }\n          return tiles;\n        }, []);\n      },\n\n      _encodeArea: function(area) {\n        //Encode area as string\n        if ((area.minRow == area.maxRow) && (area.minCol == area.maxCol)) {\n          return this.rowIndex[area.minRow] + area.minCol.toString(10);\n        } else {\n          return this.rowIndex[area.minRow] + area.minCol.toString(10) + \":\" + this.rowIndex[area.maxRow] + area.maxCol.toString(10);\n        }\n      },\n\n      _encodeAreas: function(areas) {\n        //Encode an array of areas as a string\n        var that = this;\n        return areas.map(function(area) {\n          return that._encodeArea(area);\n        }).join(\",\");\n      },\n\n      _decodeWell: function(wellAddress) {\n        var that = this;\n        var adRx = new RegExp(\"^\\\\s*(\" + that.rowIndex.join(\"|\") + \")(\\\\d+)\\\\s*$\")\n        var rcRx = /^\\s*R(\\d+)C(\\d+)\\s*$/i;\n\n        var match;\n        match = wellAddress.match(adRx);\n        if (match) {\n          var row = that.rowIndex.indexOf(match[1]);\n          if (row >= 0) {\n            return {\n              row: row,\n              col: parseInt(match[2]) - 1\n            };\n          }\n        }\n        match = wellAddress.match(rcRx);\n        if (match) {\n          return {\n            row: parseInt(match[1]) - 1,\n            col: parseInt(match[2]) - 1\n          };\n        }\n\n        throw \"Invalid well address: \" + wellAddress;\n      },\n\n      _decodeArea: function(areaAddress) {\n        //Decode single area as string\n        var that = this;\n        var wells = areaAddress.split(\":\").map(function(wellAddress) {\n          return that._decodeWell(wellAddress);\n        })\n        if (wells.length == 1) {\n          return {\n            minRow: wells[0].row,\n            minCol: wells[0].col,\n            maxRow: wells[0].row,\n            maxCol: wells[0].col\n          }\n        } else if (wells.length == 2) {\n          var minRow = Math.min(wells[0].row, wells[1].row)\n          return {\n            minRow: Math.min(wells[0].row, wells[1].row),\n            minCol: Math.min(wells[0].col, wells[1].col),\n            maxRow: Math.max(wells[0].row, wells[1].row),\n            maxCol: Math.max(wells[0].col, wells[1].col)\n          }\n        } else {\n          throw \"Invalid address: \" + areaAddress;\n        }\n      },\n\n      _decodeAreas: function(areasAddress) {\n        //Decode single area as string\n        var that = this;\n        return areasAddress.split(\",\").map(function(areaAddress) {\n          return that._decodeArea(areaAddress);\n        });\n      },\n\n      _wellToArea: function(well) {\n        //Convert a well to an area\n        return {\n          minCol: well.col,\n          minRow: well.row,\n          maxCol: well.col,\n          maxRow: well.row\n        }\n      },\n\n      _wellInArea: function(well, area) {\n        //Determine if a well lies within an area\n        return well.row >= area.minRow && well.row <= area.maxRow && well.col >= area.minCol && well.col <= area.maxCol;\n      },\n\n      _coordsToRect: function(startCoords, endCoords) {\n        //Convert two XY coords to a bounding box\n        var left = Math.min(startCoords.x, endCoords.x);\n        var top = Math.min(startCoords.y, endCoords.y);\n        var height = Math.abs(endCoords.y - startCoords.y);\n        var width = Math.abs(endCoords.x - startCoords.x);\n        return {\n          top: top,\n          left: left,\n          height: height,\n          width: width\n        };\n      },\n\n      _coordIndex: function(v, count) {\n        var i;\n        if (v < 0) {\n          i = 0;\n        } else if (v >= count) {\n          i = count - 1;\n        } else {\n          i = Math.floor(v);\n        }\n        return i;\n      },\n\n      _coordsToWell: function(coord) {\n        //Convert a coordinate to a well\n        var cols = this.dimensions.cols;\n        var rows = this.dimensions.rows;\n\n        var w = this.sizes.spacing; \n        var m = this.sizes.label_spacing; \n\n        var x = (coord.x - m) / w;\n        var y = (coord.y - m) / w;\n\n        var row = this._coordIndex(y, rows);\n        var col = this._coordIndex(x, cols);\n\n        return {\n          row: row,\n          col: col,\n        };\n      },\n\n      _wellToCoords: function(well, center) {\n        //Convert a well to a coordinate\n        var w = this.sizes.spacing; \n        var m = this.sizes.label_spacing; \n        var x = well.col * w + m;\n        var y = well.row * w + m;\n        if (center) {\n          var hw = w/2;\n          x = x + hw;\n          y = y + hw;\n        }\n\n        return {\n          x: x,\n          y: y\n        };\n      },\n\n      _areaToRect: function(area) {\n        //Convert area to rectangle\n        var rows = area.maxRow - area.minRow + 1;\n        var cols = area.maxCol - area.minCol + 1;\n\n        var w = this.sizes.spacing; \n        var m = this.sizes.label_spacing; \n\n        return {\n          top: area.minRow * w + m,\n          left: area.minCol * w + m,\n          height: rows * w,\n          width: cols * w\n        }\n      },\n\n      _rectToArea: function(rect) {\n        //Convert a rectangular region to an area\n        var rows = this.dimensions.rows;\n        var cols = this.dimensions.cols;\n\n        var w = this.sizes.spacing; \n        var m = this.sizes.label_spacing; \n\n        var left = (rect.left - m) / w;\n        var top = (rect.top - m) / w;\n        var height = rect.height / w;\n        var width = rect.width / w;\n        var right = left + width;\n        var bottom = top + height;\n\n        //select whole row\n        if (right < 0) {\n          right = cols;\n        }\n        if (left >= cols) {\n          left = 0;\n        }\n        //select whole col\n        if (bottom < 0) {\n          bottom = rows;\n        }\n        if (top <= 0) {\n          top = 0;\n        }\n\n        return {\n          minCol: this._coordIndex(left, cols),\n          minRow: this._coordIndex(top, rows),\n          maxCol: this._coordIndex(right, cols),\n          maxRow: this._coordIndex(bottom, rows)\n        };\n      }\n\n    }\n  }\n})(jQuery, fabric);"]}